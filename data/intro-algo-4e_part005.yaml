- en: '[***Part V    Advanced Data Structures***](toc.xhtml#part-5)'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '[***第五部分    高级数据结构***](toc.xhtml#part-5)'
- en: '[**Introduction**](toc.xhtml#Rh1-100)'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[**介绍**](toc.xhtml#Rh1-100)'
- en: This part returns to studying data structures that support operations on dynamic
    sets, but at a more advanced level than [Part III](part003.xhtml). One of the
    chapters, for example, makes extensive use of the amortized analysis techniques
    from [Chapter 16](chapter016.xhtml).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分重新研究支持动态集操作的数据结构，但比[第三部分](part003.xhtml)更高级。例如，其中的一章广泛使用了来自[第16章](chapter016.xhtml)的摊销分析技术。
- en: '[Chapter 17](chapter017.xhtml) shows how to augment red-black trees—adding
    additional information in each node—to support dynamic-set operations in addition
    to those covered in [Chapters 12](chapter012.xhtml) and [13](chapter013.xhtml).
    The first example augments red-black trees to dynamically maintain order statistics
    for a set of keys. Another example augments them in a different way to maintain
    intervals of real numbers. [Chapter 17](chapter017.xhtml) includes a theorem giving
    sufficient conditions for when a red-black tree can be augmented while maintaining
    the *O*(lg *n*) running times for insertion and deletion.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[第17章](chapter017.xhtml)展示了如何增强红黑树——在每个节点中添加额外信息——以支持动态集操作，除了[第12章](chapter012.xhtml)和[第13章](chapter013.xhtml)中涵盖的操作外。第一个示例增强红黑树以动态维护一组键的顺序统计信息。另一个示例以不同的方式增强它们以维护实数间隔。[第17章](chapter017.xhtml)包括一个定理，给出了红黑树何时可以增强的充分条件，同时保持插入和删除的*O*(lg
    *n*)运行时间。'
- en: '[Chapter 18](chapter018.xhtml) presents B-trees, which are balanced search
    trees specifically designed to be stored on disks. Since disks operate much more
    slowly than random-access memory, B-tree performance depends not only on how much
    computing time the dynamic-set operations consume but also on how many disk accesses
    they perform. For each B-tree operation, the number of disk accesses increases
    with the height of the B-tree, but B-tree operations keep the height low.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[第18章](chapter018.xhtml)介绍了B树，这是专门设计用于存储在磁盘上的平衡搜索树。由于磁盘的操作速度远远慢于随机访问内存，B树的性能不仅取决于动态集操作消耗的计算时间，还取决于它们执行的磁盘访问次数。对于每个B树操作，磁盘访问次数随着B树的高度增加而增加，但B树操作保持高度较低。'
- en: '[Chapter 19](chapter019.xhtml) examines data structures for disjoint sets.
    Starting with a universe of *n* elements, each initially in its own singleton
    set, the operation UNION unites two sets. At all times, the *n* elements are partitioned
    into disjoint sets, even as calls to the UNION operation change the members of
    a set dynamically. The query FIND-SET identifies the unique set that contains
    a given element at the moment. Representing each set as a simple rooted tree yields
    surprisingly fast operations: a sequence of *m* operations runs in *O*(*mα*(*n*))
    time, where *α*(*n*) is an incredibly slowly growing function—*α*(*n*) is at most
    4 in any conceivable application. The amortized analysis that proves this time
    bound is as complex as the data structure is simple.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[第19章](chapter019.xhtml)研究了不相交集的数据结构。从一个包含*n*个元素的宇宙开始，每个元素最初都在自己的单例集中，UNION操作将两个集合合并。在任何时候，*n*个元素被划分为不相交集合，即使对UNION操作的调用动态地改变了集合的成员。查询FIND-SET标识了当前包含给定元素的唯一集合。将每个集合表示为简单的根树会产生出人意料的快速操作：一系列*m*个操作在*O*(*mα*(*n*))时间内运行，其中*α*(*n*)是一个增长非常缓慢的函数—在任何可想象的应用中，*α*(*n*)最多为4。证明这个时间界的摊销分析和数据结构一样简单。'
- en: 'The topics covered in this part are by no means the only examples of “advanced”
    data structures. Other advanced data structures include the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分涵盖的主题绝不是“高级”数据结构的唯一示例��其他高级数据结构包括以下内容：
- en: '***Fibonacci heaps*** [[156](bibliography001.xhtml#endnote_156)] implement
    mergeable heaps (see Problem 10-2 on page 268) with the operations INSERT, MINIMUM,
    and UNION taking only *O*(1) actual and amortized time, and the operations EXTRACT-MIN
    and DELETE taking *O*(lg *n*) amortized time. The most significant advantage of
    these data structures, however, is that DECREASE-KEY takes only *O*(1) amortized
    time. ***Strict Fibonacci heaps*** [[73](bibliography001.xhtml#endnote_73)], developed
    later, made all of these time bounds actual. Because the DECREASE-KEY operation
    takes constant amortized time, (strict) Fibonacci heaps constitute key components
    of some of the asymptotically fastest algorithms to date for graph problems.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***斐波那契堆*** [[156](bibliography001.xhtml#endnote_156)] 实现了可合并堆（参见第268页的问题10-2），INSERT、MINIMUM和UNION操作仅需*O*(1)的实际和摊销时间，而EXTRACT-MIN和DELETE操作需要*O*(lg
    *n*)的摊销时间。然而，这些数据结构最重要的优势是DECREASE-KEY仅需*O*(1)的摊销时间。***严格斐波那契堆*** [[73](bibliography001.xhtml#endnote_73)]，稍后开发的，使所有这些时间界都成为实际时间界。由于DECREASE-KEY操作只需恒定的摊销时间，（严格）斐波那契堆构成迄今为止某些渐进最快图问题算法的关键组成部分。'
- en: '***Dynamic trees*** [[415](bibliography001.xhtml#endnote_415), [429](bibliography001.xhtml#endnote_429)]
    maintain a forest of disjoint rooted trees. Each edge in each tree has a real-valued
    cost. Dynamic trees support queries to find parents, roots, edge costs, and the
    minimum edge cost on a simple path from a node up to a root. Trees may be manipulated
    by cutting edges, updating all edge costs on a simple path from a node up to a
    root, linking a root into another tree, and making a node the root of the tree
    it appears in. One implementation of dynamic trees gives an *O*(lg *n*) amortized
    time bound for each operation, while a more complicated implementation yields
    *O*(lg *n*) worst-case time bounds. Dynamic trees are used in some of the asymptotically
    fastest network-flow algorithms.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***动态树*** [[415](bibliography001.xhtml#endnote_415), [429](bibliography001.xhtml#endnote_429)]
    维护一个不相交根树的森林。每棵树中的每条边都有一个实值成本。动态树支持查询以找到父节点、根节点、边成本，以及从节点到根的简单路径上的最小边成本。树可以通过切断边、更新从节点到根的简单路径上的所有边成本、将一个根链接到另一棵树、以及使一个节点成为其所在树的根来进行操作。一个动态树的实现为每个操作提供了*O*(lg
    *n*)的摊销时间界，而一个更复杂的实现则提供了*O*(lg *n*)的最坏情况时间界。动态树在一些渐进最快的网络流算法中使用。'
- en: '***Splay trees*** [[418](bibliography001.xhtml#endnote_418), [429](bibliography001.xhtml#endnote_429)]
    are a form of binary search tree on which the standard search-tree operations
    run in *O*(lg *n*) amortized time. One application of splay trees simplifies dynamic
    trees.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***伸展树*** [[418](bibliography001.xhtml#endnote_418), [429](bibliography001.xhtml#endnote_429)]
    是一种二叉搜索树，标准搜索树操作在*O*(lg *n*)的摊销时间内运行。伸展树的一个应用简化了动态树。'
- en: '***Persistent*** data structures allow queries, and sometimes updates as well,
    on past versions of a data structure. For example, linked data structures can
    be made persistent with only a small time and space cost [[126](bibliography001.xhtml#endnote_126)].
    Problem 13-1 gives a simple example of a persistent dynamic set.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***持久化*** 数据结构允许对数据结构的过去版本进行查询，有时也可以进行更新。例如，链接数据结构可以在只有很小的时间和空间成本的情况下持久化[[126](bibliography001.xhtml#endnote_126)]。问题13-1给出了一个持久化动态集的简单示例。'
- en: Several data structures allow a faster implementation of dictionary operations
    (INSERT, DELETE, and SEARCH) for a restricted universe of keys. By taking advantage
    of these restrictions, they are able to achieve better worst-case asymptotic running
    times than comparison-based data structures. If the keys are unique integers drawn
    from the set {0, 1, 2, … , *u* − 1}, where *u* is an exact power of 2, then a
    recursive data structure known as a ***van Emde Boas tree*** [[440](bibliography001.xhtml#endnote_440),
    [441](bibliography001.xhtml#endnote_441)] supports each of the operations SEARCH,
    INSERT, DELETE, MINIMUM, MAXIMUM, SUCCESSOR, and PREDECESSOR in *O*(lg lg *u*)
    time. ***Fusion trees*** [[157](bibliography001.xhtml#endnote_157)] were the first
    data structure to allow faster dictionary operations when the universe is restricted
    to integers, implementing these operations in *O*(lg *n*/lg lg *n*) time. Several
    subsequent data structures, including ***exponential search trees*** [[17](bibliography001.xhtml#endnote_17)],
    have also given improved bounds on some or all of the dictionary operations and
    are mentioned in the chapter notes throughout this book.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几种数据结构允许更快地实现字典操作（插入、删除和搜索）对于一组受限制的键。通过利用这些限制，它们能够实现比基于比较的数据结构更好的最坏情况渐近运行时间。如果键是从集合{0,
    1, 2, … , *u* − 1}中抽取的唯一整数，其中*u*是2的确切幂，则一种递归数据结构称为***van Emde Boas树*** [[440](bibliography001.xhtml#endnote_440),
    [441](bibliography001.xhtml#endnote_441)] 支持每个操作搜索、插入、删除、最小值、最大值、后继和前驱在*O*(lg
    lg *u*)时间内。***融合树*** [[157](bibliography001.xhtml#endnote_157)] 是第一种允许在宇宙受限于整数时更快地实现字典操作的数据结构，将这些操作实现在*O*(lg
    *n*/lg lg *n*)时间内。几种后续的数据结构，包括***指数搜索树*** [[17](bibliography001.xhtml#endnote_17)]，也改进了一些或所有字典操作的界限，并在本书的章节注释中提到。
- en: '***Dynamic graph data structures*** support various queries while allowing
    the structure of a graph to change through operations that insert or delete vertices
    or edges. Examples of the queries that they support include vertex connectivity
    [[214](bibliography001.xhtml#endnote_214)], edge connectivity, minimum spanning
    trees [[213](bibliography001.xhtml#endnote_213)], biconnectivity, and transitive
    closure [[212](bibliography001.xhtml#endnote_212)].'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***动态图数据结构*** 支持各种查询，同时允许图的结构通过插入或删除顶点或边的操作而改变。它们支持的查询示例包括顶点连通性[[214](bibliography001.xhtml#endnote_214)]，边连通性，最小生成树[[213](bibliography001.xhtml#endnote_213)]，双连通性和传递闭包[[212](bibliography001.xhtml#endnote_212)]。'
- en: Chapter notes throughout this book mention additional data structures.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的章节注释提到了其他数据结构。
