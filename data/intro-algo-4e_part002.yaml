- en: '[***Part II    Sorting and Order Statistics***](toc.xhtml#part-2)'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '[***第二部分    排序和顺序统计***](toc.xhtml#part-2)'
- en: '[**Introduction**](toc.xhtml#Rh1-31)'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[**介绍**](toc.xhtml#Rh1-31)'
- en: 'This part presents several algorithms that solve the following ***sorting problem***:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分介绍了解决以下***排序问题***的几种算法：
- en: '**Input:** A sequence of *n* numbers 〈*a*[1], *a*[2], … , *a[n]*〉.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入：** 一个包含*n*个数字的序列 〈*a*[1], *a*[2], … , *a[n]*〉。'
- en: '**Output:** A permutation (reordering) ![art](images/Art_P297a.jpg) of the
    input sequence such that ![art](images/Art_P297b.jpg).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：** 输入序列的一个排列（重新排序）![art](images/Art_P297a.jpg)，使得![art](images/Art_P297b.jpg)。'
- en: The input sequence is usually an *n*-element array, although it may be represented
    in some other fashion, such as a linked list.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 输入序列通常是一个*n*元素数组，尽管它可以用其他方式表示，比如链表。
- en: '**The structure of the data**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据的结构**'
- en: In practice, the numbers to be sorted are rarely isolated values. Each is usually
    part of a collection of data called a ***record***. Each record contains a ***key***,
    which is the value to be sorted. The remainder of the record consists of ***satellite
    data***, which are usually carried around with the key. In practice, when a sorting
    algorithm permutes the keys, it must permute the satellite data as well. If each
    record includes a large amount of satellite data, it often pays to permute an
    array of pointers to the records rather than the records themselves in order to
    minimize data movement.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，要排序的数字很少是孤立的值。每个数字通常是称为***记录***的数据集的一部分。每个记录包含一个***键***，这是要排序的值。记录的其余部分包含***卫星数据***，通常与键一起携带。在实践中，当排序算法重新排列键时，必须同时重新排列卫星数据。如果每个记录包含大量卫星数据，通常最好重新排列记录的指针数组而不是记录本身，以最小化数据移动。
- en: In a sense, it is these implementation details that distinguish an algorithm
    from a full-blown program. A sorting algorithm describes the *method* to determine
    the sorted order, regardless of whether what’s being sorted are individual numbers
    or large records containing many bytes of satellite data. Thus, when focusing
    on the problem of sorting, we typically assume that the input consists only of
    numbers. Translating an algorithm for sorting numbers into a program for sorting
    records is conceptually straightforward, although in a given engineering situation
    other subtleties may make the actual programming task a challenge.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上说，正是这些实现细节区分了一个算法和一个完整的程序。排序算法描述了确定排序顺序的*方法*，无论被排序的是单个数字还是包含许多字节卫星数据的大记录。因此，当专注于排序问题时，我们通常假设输入只包含数字。将用于排序数字的算法转换为用于排序记录的程序在概念上是直接的，尽管在特定的工程情况下，其他微妙之处可能使实际编程任务成为一项挑战。
- en: '**Why sorting?**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么排序？**'
- en: 'Many computer scientists consider sorting to be the most fundamental problem
    in the study of algorithms. There are several reasons:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 许多计算机科学家认为排序是算法研究中最基本的问题。有几个原因：
- en: Sometimes an application inherently needs to sort information. For example,
    in order to prepare customer statements, banks need to sort checks by check number.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，应用程序固有地需要对信息进行排序。例如，为了准备客户对账单，银行需要按支票号码对支票进行排序。
- en: Algorithms often use sorting as a key subroutine. For example, a program that
    renders graphical objects which are layered on top of each other might have to
    sort the objects according to an “above” relation so that it can draw these objects
    from bottom to top. We will see numerous algorithms in this text that use sorting
    as a subroutine.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算法通常将排序作为一个关键子程序。例如，一个��染图形对象并将其层叠在一起的程序可能需要根据“上面”关系对对象进行排序，以便可以从底部向顶部绘制这些对象。我们将在本文中看到许多使用排序作为子程序的算法。
- en: We can draw from among a wide variety of sorting algorithms, and they employ
    a rich set of techniques. In fact, many important techniques used throughout algorithm
    design appear in sorting algorithms that have been developed over the years. In
    this way, sorting is also a problem of historical interest.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以从各种各样的排序算法中选择，并且它们采用丰富的技术。事实上，多年来开发的排序算法中使用了许多在算法设计中使用的重要技术。这样，排序也是一个具有历史兴趣的问题。
- en: We can prove a nontrivial lower bound for sorting (as we’ll do in [Chapter 8](chapter008.xhtml)).
    Since the best upper bounds match the lower bound asymptotically, we can conclude
    that certain of our sorting algorithms are asymptotically optimal. Moreover, we
    can use the lower bound for sorting to prove lower bounds for various other problems.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以证明排序的一个非平凡下界（正如我们将在[第8章](chapter008.xhtml)中所做的那样）。由于最佳上界与下界在渐近意义上匹配，我们可以得出结论，我们某些排序算法在渐近意义上是最优的。此外，我们可以利用排序的下界来证明各种其他问题的下界。
- en: Many engineering issues come to the fore when implementing sorting algorithms.
    The fastest sorting program for a particular situation may depend on many factors,
    such as prior knowledge about the keys and satellite data, the memory hierarchy
    (caches and virtual memory) of the host computer, and the software environment.
    Many of these issues are best dealt with at the algorithmic level, rather than
    by “tweaking” the code.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实现排序算法时会出现许多工程问题。对于特定情况的最快排序程序可能取决于许多因素，例如关于键和卫星数据的先前知识，主机计算机的内存���次结构（缓存和虚拟内存）以及软件环境。许多这些问题最好在算法级别上处理，而不是通过“微调”代码来解决。
- en: '**Sorting algorithms**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**排序算法**'
- en: We introduced two algorithms that sort *n* real numbers in [Chapter 2](chapter002.xhtml).
    Insertion sort takes Θ(*n*²) time in the worst case. Because its inner loops are
    tight, however, it is a fast sorting algorithm for small input sizes. Moreover,
    unlike merge sort, it sorts ***in place***, meaning that at most a constant number
    of elements of the input array are ever stored outside the array, which can be
    advantageous for space efficiency. Merge sort has a better asymptotic running
    time, Θ(*n* lg *n*), but the MERGE procedure it uses does not operate in place.
    (We’ll see a parallelized version of merge sort in [Section 26.3](chapter026.xhtml#Sec_26.3).)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第2章](chapter002.xhtml)介绍了两种对*n*个实数进行排序的算法。插入排序在最坏情况下需要Θ(*n*²)的时间。然而，由于其内部循环紧凑，它是一种对小输入大小快速排序的算法。此外，与归并排序不同，它是***原地***排序的，这意味着最多只有一个常数数量的输入数组元素存储在数组外部，这对于节省空间是有利的。归并排序具有更好的渐近运行时间，Θ(*n*
    lg *n*)，但其使用的MERGE过程不是原地操作。（我们将在[第26.3节](chapter026.xhtml#Sec_26.3)中看到归并排序的并行化版本。）
- en: This part introduces two more algorithms that sort arbitrary real numbers. Heapsort,
    presented in [Chapter 6](chapter006.xhtml), sorts *n* numbers in place in *O*(*n*
    lg *n*) time. It uses an important data structure, called a heap, which can also
    implement a priority queue.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分介绍了另外两种对任意实数进行排序的算法。堆排序，介绍于[第6章](chapter006.xhtml)，可以在*O*(*n* lg *n*)的时间内原地对*n*个数字进行排序。它使用了一个重要的数据结构，称为堆，它还可以实现优先队列。
- en: Quicksort, in [Chapter 7](chapter007.xhtml), also sorts *n* numbers in place,
    but its worst-case running time is Θ(*n*²). Its expected running time is Θ(*n*
    lg *n*), however, and it generally outperforms heapsort in practice. Like insertion
    sort, quicksort has tight code, and so the hidden constant factor in its running
    time is small. It is a popular algorithm for sorting large arrays.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 快速排序，在[第7章](chapter007.xhtml)中，也可以原地对*n*个数字进行排序，但其最坏情况运行时间是Θ(*n*²)。然而，其期望运行时间是Θ(*n*
    lg *n*)，通常在实践中优于堆排序。与插入排序类似，快速排序具有紧凑的代码，因此其运行时间中的隐藏常数因子很小。它是一种用于排序大型数组的流行算法。
- en: 'Insertion sort, merge sort, heapsort, and quicksort are all comparison sorts:
    they determine the sorted order of an input array by comparing elements. [Chapter
    8](chapter008.xhtml) begins by introducing the decision-tree model in order to
    study the performance limitations of comparison sorts. Using this model, we prove
    a lower bound of Ω(*n* lg *n*) on the worst-case running time of any comparison
    sort on *n* inputs, thus showing that heapsort and merge sort are asymptotically
    optimal comparison sorts.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 插入排序、归并排序、堆排序和快速排序都是比较排序：它们通过比较元素来确定输入数组的排序顺序。[第8章](chapter008.xhtml)首先介绍决策树模型，以研究比较排序的性能限制。使用这个模型，我们证明了对于*n*个输入的任何比较排序的最坏情况运行时间的Ω(*n*
    lg *n*)下界，从而表明堆排序和归并排序是渐近最优的比较排序。
- en: '[Chapter 8](chapter008.xhtml) then goes on to show that we might be able to
    beat this lower bound of Ω(*n* lg *n*) if an algorithm can gather information
    about the sorted order of the input by means other than comparing elements. The
    counting sort algorithm, for example, assumes that the input numbers belong to
    the set {0, 1, … , *k*}. By using array indexing as a tool for determining relative
    order, counting sort can sort *n* numbers in Θ(*k* + *n*) time. Thus, when *k*
    = *O*(*n*), counting sort runs in time that is linear in the size of the input
    array. A related algorithm, radix sort, can be used to extend the range of counting
    sort. If there are *n* integers to sort, each integer has *d* digits, and each
    digit can take on up to *k* possible values, then radix sort can sort the numbers
    in Θ(*d*(*n* + *k*)) time. When *d* is a constant and *k* is *O*(*n*), radix sort
    runs in linear time. A third algorithm, bucket sort, requires knowledge of the
    probabilistic distribution of numbers in the input array. It can sort *n* real
    numbers uniformly distributed in the half-open interval [0, 1) in average-case
    *O*(*n*) time.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](chapter008.xhtml) 接着展示了如果一个算法可以通过其他方式获取输入的排序顺序信息而不是比较元素，我们可能能够打破Ω(*n*
    lg *n*)的下界。例如，计数排序算法假设输入数字属于集合{0, 1, … , *k*}。通过使用数组索引来确定相对顺序，计数排序可以在Θ(*k* + *n*)的时间内对*n*个数字进行排序。因此，当*k*
    = *O*(*n*)时，计数排序的运行时间与输入数组的大小成线性关系。一个相关的算法，基数排序，可以用来扩展计数排序的范围。如果有*n*个整数需要排序，每个整数有*d*位数，每个位数可以取*k*个可能的值，那么基数排序可以在Θ(*d*(*n*
    + *k*))的时间内对数字进行排序。当*d*是一个常数且*k*是*O*(*n*)时，基数排序的运行时间是线性的。第三个算法，桶排序，需要了解输入数组中数字的概率分布。它可以在平均情况下以*O*(*n*)的时间对半开区间[0,
    1)中均匀分布的*n*个实数进行排序。'
- en: The table on the following page summarizes the running times of the sorting
    algorithms from [Chapters 2](chapter002.xhtml) and [6](chapter006.xhtml)–[8](chapter008.xhtml).
    As usual, *n* denotes the number of items to sort. For counting sort, the items
    to sort are integers in the set {0, 1, … , *k*}. For radix sort, each item is
    a *d*-digit number, where each digit takes on *k* possible values. For bucket
    sort, we assume that the keys are real numbers uniformly distributed in the half-open
    interval [0, 1). The rightmost column gives the average-case or expected running
    time, indicating which one it gives when it differs from the worst-case running
    time. We omit the average-case running time of heapsort because we do not analyze
    it in this book.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下一页的表格总结了来自[第2章](chapter002.xhtml)和[第6章](chapter006.xhtml)–[第8章](chapter008.xhtml)的排序算法的运行时间。通常，*n*表示要排序的项目数。对于计数排序，要排序的项目是集合{0,
    1, … , *k*}中的整数。对于基数排序，每个项目是一个*d*位数，其中每个位数可以取*k*个可能的值。对于桶排序，我们假设键是均匀分布在半开区间[0,
    1)中的实数。最右侧的列给出了平均情况或期望运行时间，指出当与最坏情况运行时间不同时给出的情况。我们省略了堆排序的平均情况运行时间，因为我们在本书中没���对其进行分析。
- en: '| Algorithm | Worst-case running time | Average-case/expected running time
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 算法 | 最坏情况运行时间 | 平均情况/期望运行时间 |'
- en: '| Insertion sort | Θ(*n*²) | Θ(*n*²) |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 插入排序 | Θ(*n*²) | Θ(*n*²) |'
- en: '| Merge sort | Θ(*n* lg *n*) | Θ(*n* lg *n*) |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 归并排序 | Θ(*n* lg *n*) | Θ(*n* lg *n*) |'
- en: '| Heapsort | *O*(*n* lg *n*) | — |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 堆排序 | *O*(*n* lg *n*) | — |'
- en: '| Quicksort | Θ(*n*²) | Θ(*n* lg *n*) (expected) |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 快速排序 | Θ(*n*²) | Θ(*n* lg *n*) (期望) |'
- en: '| Counting sort | Θ(*k* + *n*) | Θ(*k* + *n*) |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 计数排序 | Θ(*k* + *n*) | Θ(*k* + *n*) |'
- en: '| Radix sort | Θ(*d*(*n* + *k*)) | Θ(*d*(*n* + *k*)) |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 基数排序 | Θ(*d*(*n* + *k*)) | Θ(*d*(*n* + *k*)) |'
- en: '| Bucket sort | Θ(*n*²) | Θ(*n*) (average-case) |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 桶排序 | Θ(*n*²) | Θ(*n*) (平均情况) |'
- en: '**Order statistics**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**顺序统计量**'
- en: The *i*th order statistic of a set of *n* numbers is the *i*th smallest number
    in the set. You can, of course, select the *i*th order statistic by sorting the
    input and indexing the *i*th element of the output. With no assumptions about
    the input distribution, this method runs in Ω(*n* lg *n*) time, as the lower bound
    proved in [Chapter 8](chapter008.xhtml) shows.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一组*n*个数字的第*i*个顺序统计量是该组中第*i*小的数字。当然，你可以通过对输入进行排序并索引输出的第*i*个元素来选择第*i*个顺序统计量。在没有关于输入分布的任何假设的情况下，这种方法的运行时间为Ω(*n*
    lg *n*)，正如[第8章](chapter008.xhtml)中证明的下界所示。
- en: '[Chapter 9](chapter009.xhtml) shows how to find the *i*th smallest element
    in *O*(*n*) time, even when the elements are arbitrary real numbers. We present
    a randomized algorithm with tight pseudocode that runs in Θ(*n*²) time in the
    worst case, but whose expected running time is *O*(*n*). We also give a more complicated
    algorithm that runs in *O*(*n*) worst-case time.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](chapter009.xhtml)展示了如何在*O*(*n*)时间内找到第*i*小的元素，即使元素是任意实数。我们提出了一个具有紧密伪代码的随机算法，其最坏情况下运行时间为Θ(*n*²)，但其期望运行时间为*O*(*n*)。我们还提供了一个更复杂的算法，其最坏情况下运行时间为*O*(*n*)。'
- en: '**Background**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**背景**'
- en: Although most of this part does not rely on difficult mathematics, some sections
    do require mathematical sophistication. In particular, analyses of quicksort,
    bucket sort, and the order-statistic algorithm use probability, which is reviewed
    in [Appendix C](appendix003.xhtml), and the material on probabilistic analysis
    and randomized algorithms in [Chapter 5](chapter005.xhtml).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这部分大部分内容不依赖于困难的数学知识，但有些部分确实需要数学的复杂性。特别是，快速排序、桶排序和顺序统计算法的分析使用了概率，这在[附录C](appendix003.xhtml)中有所介绍，以及[第5章](chapter005.xhtml)中关于概率分析和随机算法的材料。
