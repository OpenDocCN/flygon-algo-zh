- en: '[**A Summations**](toc.xhtml#app-1)'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '[**A求和**](toc.xhtml#app-1)'
- en: When an algorithm contains an iterative control construct such as a **while**
    or **for** loop, you can express its running time as the sum of the times spent
    on each execution of the body of the loop. For example, [Section 2.2](chapter002.xhtml#Sec_2.2)
    argued that the *i* th iteration of insertion sort took time proportional to *i*
    in the worst case. Adding up the time spent on each iteration produced the summation
    (or series) ![art](images/Art_P1525.jpg). Evaluating this summation resulted in
    a bound of Θ(*n*²) on the worst-case running time of the algorithm. This example
    illustrates why you should know how to manipulate and bound summations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当算法包含迭代控制结构（如**while**或**for**循环）时，你可以将其运行时间表示为循环体每次执行所花费的时间之和。例如，[2.2节](chapter002.xhtml#Sec_2.2)论证了插入排序的第*i*次迭代在最坏情况下花费的时间与*i*成正比。将每次迭代花费的时间相加产生了求和（或级数）![art](images/Art_P1525.jpg)。评估这个求和得出了算法最坏情况运行时间为Θ(*n*²)的界限。这个例子说明了为什么你应该知道如何处理和界定求和。
- en: '[Section A.1](appendix001.xhtml#Sec_A.1) lists several basic formulas involving
    summations. [Section A.2](appendix001.xhtml#Sec_A.2) offers useful techniques
    for bounding summations. The formulas in [Section A.1](appendix001.xhtml#Sec_A.1)
    appear without proof, though proofs for some of them appear in [Section A.2](appendix001.xhtml#Sec_A.2)
    to illustrate the methods of that section. You can find most of the other proofs
    in any calculus text.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[A.1节](appendix001.xhtml#Sec_A.1)列出了涉及求和的几个基本公式。[A.2节](appendix001.xhtml#Sec_A.2)提供了有关求和边界的有用技巧。[A.1节](appendix001.xhtml#Sec_A.1)中的公式未经证明，但其中一些的证明出现在[A.2节](appendix001.xhtml#Sec_A.2)中，以说明该节的方法。你可以在任何微积分教材中找到其他大部分证明。'
- en: '[**A.1 Summation formulas and properties**](toc.xhtml#Rh1-214)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[**A.1求和公式和性质**](toc.xhtml#Rh1-214)'
- en: Given a sequence *a*[1], *a*[2], … , *a[n]* of numbers, where *n* is a nonnegative
    integer, the finite sum *a*[1] + *a*[2] + … + *a[n]* can be expressed as ![art](images/Art_P1526.jpg).
    If *n* = 0, the value of the summation is defined to be 0\. The value of a finite
    series is always well defined, and the order in which its terms are added does
    not matter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个数字序列*a*[1]，*a*[2]，…，*a[n]*，其中*n*是非负整数，有限和*a*[1] + *a*[2] + … + *a[n]*可以表示为![art](images/Art_P1526.jpg)。如果*n*
    = 0，求和的值被定义为0。有限级数的值总是明确定义的，其项的加法顺序并不重要。
- en: Given an infinite sequence *a*[1], *a*[2], … of numbers, we can write their
    infinite sum *a*[1] + *a*[2] + … as ![art](images/Art_P1527.jpg), which means
    ![art](images/Art_P1528.jpg). If the limit does not exist, the series ***diverges***,
    and otherwise, it ***converges***. The terms of a convergent series cannot always
    be added in any order. You can, however, rearrange the terms of an ***absolutely
    convergent series***, that is, a series ![art](images/Art_P1529.jpg) for which
    the series ![art](images/Art_P1530.jpg) also converges.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个无限序列*a*[1]，*a*[2]，…，我们可以将它们的无限和*a*[1] + *a*[2] + …写为![art](images/Art_P1527.jpg)，这意味着![art](images/Art_P1528.jpg)。如果极限不存在，级数***发散***，否则***收敛***。一个收敛级数的项并不总是可以以任意顺序相加。然而，你可以重新排列***绝对收敛级数***的项，即一个级数![art](images/Art_P1529.jpg)对于这个级数![art](images/Art_P1530.jpg)也收敛。
- en: '**Linearity**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**线性性**'
- en: For any real number *c* and any finite sequences *a*[1], *a*[2], … , *a[n]*
    and *b*[1], *b*[2], … , *b[n]*,
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任意实数*c*和任意有限序列*a*[1]，*a*[2]，…，*a[n]*和*b*[1]，*b*[2]，…，*b[n]*，
- en: '![art](images/Art_P1531.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1531.jpg)'
- en: The linearity property also applies to infinite convergent series.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 线性性质也适用于无限收敛级数。
- en: The linearity property applies to summations incorporating asymptotic notation.
    For example,
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 线性性质适用于包含渐近符号的求和。例如，
- en: '![art](images/Art_P1532.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1532.jpg)'
- en: In this equation, the Θ-notation on the left-hand side applies to the variable
    *k*, but on the right-hand side, it applies to *n*. Such manipulations also apply
    to infinite convergent series.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方程中，左侧的Θ-符号适用于变量*k*，但右侧的Θ-符号适用于*n*。这种操作也适用于无限收敛级数。
- en: '**Arithmetic series**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**等差数列**'
- en: The summation
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 求和
- en: '![art](images/Art_P1533.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1533.jpg)'
- en: is an ***arithmetic series*** and has the value
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个***等差数列***，其值为
- en: '![art](images/Art_P1534.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1534.jpg)'
- en: 'A ***general arithmetic series*** includes an additive constant *a* ≥ 0 and
    a constant coefficient *b* > 0 in each term, but has the same total asymptotically:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含加法常数*a* ≥ 0和每项中的常数系数*b* > 0的***一般等差数列***，但总体上是相同的：
- en: '![art](images/Art_P1535.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1535.jpg)'
- en: '**Sums of squares and cubes**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**平方和和立方和**'
- en: 'The following formulas apply to summations of squares and cubes:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下公式适用于平方和和立方和的求和：
- en: '![art](images/Art_P1536.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1536.jpg)'
- en: '**Geometric series**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**等比数列**'
- en: For real *x* ≠ 1, the summation
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实数*x* ≠ 1，求和
- en: '![art](images/Art_P1537.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1537.jpg)'
- en: is a ***geometric series*** and has the value
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个***等比数列***，其值为
- en: '![art](images/Art_P1538.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1538.jpg)'
- en: 'The infinite decreasing geometric series occurs when the summation is infinite
    and |*x*| < 1:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当求和是无限的且|x| < 1时，无限递减几何级数发生：
- en: '![art](images/Art_P1539.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1539.jpg)'
- en: If we assume that 0⁰ = 1, these formulas apply even when *x* = 0.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们假设0⁰ = 1，这些公式即使在*x* = 0时也适用。
- en: '**Harmonic series**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**调和级数**'
- en: For positive integers *n*, the *n*th ***harmonic number*** is
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于正整数*n*，第*n*个***调和数***是
- en: '![art](images/Art_P1540.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1540.jpg)'
- en: Inequalities (A.20) and (A.21) on page 1150 provide the stronger bounds
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不等式(A.20)和(A.21)在第1150页提供了更强的界限
- en: '![art](images/Art_P1541.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1541.jpg)'
- en: '**Integrating and differentiating series**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**级数的积分和微分**'
- en: Integrating or differentiating the formulas above yields additional formulas.
    For example, differentiating both sides of the infinite geometric series (A.7)
    and multiplying by *x* gives
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对上述公式进行积分或微分会得到额外的公式。例如，对无限等比数��(A.7)的两边进行微分并乘以*x*得到
- en: '![art](images/Art_P1542.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1542.jpg)'
- en: '**Telescoping series**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**望远镜级数**'
- en: For any sequence *a*[0], *a*[1], … , *a[n]*,
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任意序列*a*[0]，*a*[1]，…，*a[n]*，
- en: '![art](images/Art_P1543.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1543.jpg)'
- en: since each of the terms *a*[1], *a*[2], … , *a*[*n*−1] is added in exactly once
    and subtracted out exactly once. We say that the sum ***telescopes***. Similarly,
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因为每个项 *a*[1], *a*[2], … , *a*[*n*−1] 恰好被加入一次并被减去一次。我们称这个求和为***telescopes***。同样地，
- en: '![art](images/Art_P1544.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1544.jpg)'
- en: As an example of a telescoping sum, consider the series
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个展开求和的例子，考虑级数
- en: '![art](images/Art_P1545.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1545.jpg)'
- en: Rewriting each term as
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个项重写为
- en: '![art](images/Art_P1546.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1546.jpg)'
- en: gives
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 得到
- en: '![art](images/Art_P1547.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1547.jpg)'
- en: '**Reindexing summations**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**重新索引求和**'
- en: A series can sometimes be simplified by changing its index, often reversing
    the order of summation. Consider the series ![art](images/Art_P1548.jpg). Because
    the terms in this summation are *a[n]*, *a*[*n*−1], … , *a*[0], we can reverse
    the order of indices by letting *j* = *n* − *k* and rewrite this summation as
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有时可以通过改变其索引来简化一个级数，通常是颠倒求和的顺序。考虑级数 ![art](images/Art_P1548.jpg)。因为这个求和中的项是 *a[n]*,
    *a*[*n*−1], … , *a*[0]，我们可以通过令 *j* = *n* − *k* 来颠倒索引的顺序，并将这个求和重写为
- en: '![art](images/Art_P1549.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1549.jpg)'
- en: Generally, if the summation index appears in the body of the sum with a minus
    sign, it’s worth thinking about reindexing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，如果求和的索引在求和体中带有负号，值得考虑重新索引。
- en: As an example, consider the summation
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，考虑求和
- en: '![art](images/Art_P1550.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1550.jpg)'
- en: The index *k* appears with a negative sign in 1/(*n* − *k* + 1). And indeed,
    we can simplify this summation, this time setting *j* = *n* − *k* + 1, yielding
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 索引 *k* 在 1/(*n* − *k* + 1) 中带有负号。事实上，我们可以简化这个求和，这次设置 *j* = *n* − *k* + 1，得到
- en: '![art](images/Art_P1551.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1551.jpg)'
- en: which is just the harmonic series (A.8).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是调和级数（A.8）。
- en: '**Products**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**乘积**'
- en: The finite product *a*[1]*a*[2] … *a[n]* can be expressed as
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有限乘积 *a*[1]*a*[2] … *a[n]* 可以表示为
- en: '![art](images/Art_P1552.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1552.jpg)'
- en: If *n* = 0, the value of the product is defined to be 1\. You can convert a
    formula with a product to a formula with a summation by using the identity
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *n* = 0，乘积的值被定义为 1。你可以通过使用恒等式将带有乘积的公式转换为带有求和的公式
- en: '![art](images/Art_P1553.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1553.jpg)'
- en: '**Exercises**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习**'
- en: '***A.1-1***'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '***A.1-1***'
- en: Prove that ![art](images/Art_P1554.jpg) by using the linearity property of summations.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用求和的线性性质证明 ![art](images/Art_P1554.jpg)。
- en: '***A.1-2***'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '***A.1-2***'
- en: Find a simple formula for ![art](images/Art_P1555.jpg).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 找到一个简单的公式来表示 ![art](images/Art_P1555.jpg)。
- en: '***A.1-3***'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '***A.1-3***'
- en: Interpret the decimal number 111,111,111 in light of equation (A.6).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 根据方程（A.6），解释十进制数 111,111,111。
- en: '***A.1-4***'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '***A.1-4***'
- en: Evaluate the infinite series ![art](images/Art_P1556.jpg).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 求解无穷级数 ![art](images/Art_P1556.jpg)。
- en: '***A.1-5***'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '***A.1-5***'
- en: Let *c* ≥ 0 be a constant. Show that ![art](images/Art_P1557.jpg).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让 *c* ≥ 0 为常数。证明 ![art](images/Art_P1557.jpg)。
- en: '***A.1-6***'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '***A.1-6***'
- en: Show that ![art](images/Art_P1558.jpg) for |*x*| < 1.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 展示当 |*x*| < 1 时 ![art](images/Art_P1558.jpg)。
- en: '***A.1-7***'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '***A.1-7***'
- en: Prove that ![art](images/Art_P1559.jpg). (*Hint:* Show the asymptotic upper
    and lower bounds separately.)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 证明 ![art](images/Art_P1559.jpg)。（*提示：分别展示渐近上界和下界。）
- en: ★ ***A.1-8***
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ★ ***A.1-8***
- en: Show that ![art](images/Art_P1560.jpg) by manipulating the harmonic series.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过操作调和级数，展示 ![art](images/Art_P1560.jpg)。
- en: ★ ***A.1-9***
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: ★ ***A.1-9***
- en: Show that ![art](images/Art_P1561.jpg).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 展示 ![art](images/Art_P1561.jpg)。
- en: ★ ***A.1-10***
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ★ ***A.1-10***
- en: Evaluate the sum ![art](images/Art_P1562.jpg).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 求解求和 ![art](images/Art_P1562.jpg)。
- en: ★ ***A.1-11***
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ★ ***A.1-11***
- en: Evaluate the product ![art](images/Art_P1563.jpg).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 求解乘积 ![art](images/Art_P1563.jpg)。
- en: '[**A.2 Bounding summations**](toc.xhtml#Rh1-215)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[**A.2 界定求和**](toc.xhtml#Rh1-215)'
- en: You can choose from several techniques to bound the summations that describe
    the running times of algorithms. Here are some of the most frequently used methods.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择几种技术来界定描述算法运行时间的求和。以下是一些最常用的方法。
- en: '**Mathematical induction**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**数学归纳法**'
- en: The most basic way to evaluate a series is to use mathematical induction. As
    an example, let’s prove that the arithmetic series ![art](images/Art_P1564.jpg)
    evaluates to *n*(*n* + 1)/2\. For *n* = 1, we have that *n*(*n* + 1)/2 = 1 · 2/2
    = 1, which equals ![art](images/Art_P1565.jpg). With the inductive assumption
    that it holds for *n*, we prove that it holds for *n* + 1\. We have
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 评估一个级数的最基本方法是使用数学归纳法。举个例子，让我们证明等差级数 ![art](images/Art_P1564.jpg) 的值为 *n*(*n*
    + 1)/2。对于 *n* = 1，我们有 *n*(*n* + 1)/2 = 1 · 2/2 = 1，等于 ![art](images/Art_P1565.jpg)。根据归纳假设，它对于
    *n* 成立，我们证明它对于 *n* + 1 也成立。我们有
- en: '![art](images/Art_P1566.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1566.jpg)'
- en: You don’t always need to guess the exact value of a summation in order to use
    mathematical induction. Instead, you can use induction to prove an upper or lower
    bound on a summation. As an example, let’s prove the asymptotic upper bound ![art](images/Art_P1567.jpg).
    More specifically, we’ll prove that ![art](images/Art_P1568.jpg) for some constant
    *c*. For the initial condition *n* = 0, we have ![art](images/Art_P1569.jpg) as
    long as *c* ≥ 1\. Assuming that the bound holds for *n*, we prove that it holds
    for *n* + 1\. We have
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你并不总是需要猜测求和的确切值才能使用数学归纳法。相反，你可以使用归纳法证明求和的上界或下界。举个例子，让我们证明渐近上界 ![art](images/Art_P1567.jpg)。更具体地，我们将证明对于某个常数
    *c*，有 ![art](images/Art_P1568.jpg)。对于初始条件 *n* = 0，只要 *c* ≥ 1，我们有 ![art](images/Art_P1569.jpg)。假设该界对于
    *n* 成立，我们证明它对于 *n* + 1 也成立。我们有
- en: '![art](images/Art_P1570.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1570.jpg)'
- en: as long as (1/3 + 1/*c*) ≤ 1 or, equivalently, *c* ≥ 3/2\. Thus, ![art](images/Art_P1571.jpg),
    as we wished to show.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 只要 (1/3 + 1/*c*) ≤ 1 或者等价地，*c* ≥ 3/2。因此，我们有 ![art](images/Art_P1571.jpg)，正如我们所希望的那样。
- en: 'You need to take care when using asymptotic notation to prove bounds by induction.
    Consider the following fallacious proof that ![art](images/Art_P1572.jpg). Certainly,
    ![art](images/Art_P1573.jpg). Assuming that the bound holds for *n*, we now prove
    it for *n* + 1:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用渐��符号证明界时，需要小心。考虑以下关于 ![art](images/Art_P1572.jpg) 的错误证明。显然，![art](images/Art_P1573.jpg)。假设该界对于
    *n* 成立，我们现在证明它对于 *n* + 1：
- en: '![art](images/Art_P1574.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![art](images/Art_P1574.jpg)'
- en: The bug in the argument is that the “constant” hidden by the “big-oh” grows
    with *n* and thus is not constant. We have not shown that the same constant works
    for *all n*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 论证中的错误在于“大O符号”隐藏的“常数”随着*n*的增长而增长，因此并非恒定。我们没有证明同一个常数适用于*所有n*。
- en: '**Bounding the terms**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**限制项**'
- en: You can sometimes obtain a good upper bound on a series by bounding each term
    of the series, and it often suffices to use the largest term to bound the others.
    For example, a quick upper bound on the arithmetic series (A.1) is
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可以通过限制级数的每一项来获得一个很好的上界，通常使用最大项来限制其他项就足够了。例如，对算术级数(A.1)的一个快速上界是
- en: '![art](images/Art_P1575.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1575.jpg)'
- en: 'In general, for a series ![art](images/Art_P1576.jpg), if we let *a*[max] =
    max {*a[k]* : 1 ≤ *k* ≤ *n*}, then'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '一般来说，对于一个级数![艺术](images/Art_P1576.jpg)，如果我们让*a*[max] = max {*a[k]* : 1 ≤ *k*
    ≤ *n*}，那么'
- en: '![art](images/Art_P1578.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1578.jpg)'
- en: The technique of bounding each term in a series by the largest term is a weak
    method when the series can in fact be bounded by a geometric series. Given the
    series ![art](images/Art_P1579.jpg), suppose that *a*[*k*+1]/*a[k]* ≤ *r* for
    all *k* ≥ 0, where 0 < *r* < 1 is a constant. You can bound the sum by an infinite
    decreasing geometric series, since *a*[*k*] ≤ *a*[0]*r^k*, and thus
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当级数实际上可以受到几何级数的限制时，通过将级数中的每一项限制为最大项的方法是一种弱方法。给定级数![艺术](images/Art_P1579.jpg)，假设对于所有*k*
    ≥ 0，*a*[*k*+1]/*a[k]* ≤ *r*，其中0 < *r* < 1是一个常数。你可以通过一个无限递减的几何级数来限制求和，因为*a*[*k*]
    ≤ *a*[0]*r^k*，因此
- en: '![art](images/Art_P1580.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1580.jpg)'
- en: You can apply this method to bound the summation ![art](images/Art_P1581.jpg).
    In order to start the summation at *k* = 0, rewrite it as ![art](images/Art_P1582.jpg).
    The first term (*a*[0]) is 1/3, and the ratio (*r*) of consecutive terms is
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以应用这种方法来限制求和![艺术](images/Art_P1581.jpg)。为了从*k* = 0开始求和，将其重写为![艺术](images/Art_P1582.jpg)。第一项(*a*[0])是1/3，连续项的比值(*r*)是
- en: '![art](images/Art_P1583.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1583.jpg)'
- en: for all *k* ≥ 0\. Thus, we have
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有*k* ≥ 0。因此，我们有
- en: '![art](images/Art_P1584.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1584.jpg)'
- en: A common bug in applying this method is to show that the ratio of consecutive
    terms is less than 1 and then to assume that the summation is bounded by a geometric
    series. An example is the infinite harmonic series, which diverges since
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用这种方法时的一个常见错误是显示连续项的比值小于1，然后假设求和受到几何级数的限制。一个例子是无限调和级数，它发散，因为
- en: '![art](images/Art_P1585.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1585.jpg)'
- en: The ratio of the (*k*+1)st and *k*th terms in this series is *k*/(*k*+1) < 1,
    but the series is not bounded by a decreasing geometric series. To bound a series
    by a geometric series, you need to show that there is an *r* < 1, which is a *constant*,
    such that the ratio of all pairs of consecutive terms never exceeds *r*. In the
    harmonic series, no such *r* exists because the ratio becomes arbitrarily close
    to 1.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这个级数的(*k*+1)项和*k*项的比值是*k*/(*k*+1) < 1，但这个级数不受递减几何级数的限制。要通过几何级数限制一个级数，你需要证明存在一个小于1的*r*，即一个*常数*，使得所有连续项的比值永远不超过*r*。在调和级数中，不存在这样的*r*，因为比值会无限接近1。
- en: '**Splitting summations**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**分割求和**'
- en: One way to obtain bounds on a difficult summation is to express the series as
    the sum of two or more series by partitioning the range of the index and then
    to bound each of the resulting series. For example, let’s find a lower bound on
    the arithmetic series ![art](images/Art_P1586.jpg), which we have already seen
    has an upper bound of *n*². You might attempt to bound each term in the summation
    by the smallest term, but since that term is 1, you would get a lower bound of
    *n* for the summation—far off from the upper bound of *n*².
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 获得一个困难求和的界限的一种方法是将级数表示为两个或更多级数的和，通过划分索引范围然后限制每个结果级数。例如，让我们找到算术级数![艺术](images/Art_P1586.jpg)的一个下界，我们已经知道它有一个上界为*n*²。你可能尝试将求和中的每一项限制为最小项，但由于该项为1，你将得到一个远低于*n*²的求和下界。
- en: You can obtain a better lower bound by first splitting the summation. Assume
    for convenience that *n* is even, so that
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过首先分割求和，你可以获得更好的下界。为了方便起见，假设*n*是偶数，这样
- en: '![art](images/Art_P1587.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1587.jpg)'
- en: which is an asymptotically tight bound, since ![art](images/Art_P1588.jpg).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个渐近紧密的界限，因为![艺术](images/Art_P1588.jpg)。
- en: For a summation arising from the analysis of an algorithm, you can sometimes
    split the summation and ignore a constant number of the initial terms. Generally,
    this technique applies when each term *a[k]* in a summation ![art](images/Art_P1589.jpg)
    is independent of *n*. Then for any constant *k*[0] > 0, you can write
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于由算法分析产生的求和，有时你可以将求和分割并忽略初始项的常数数量。通常，当求和![艺术](images/Art_P1589.jpg)中的每一项*a[k]*与*n*无关时，这种技术适用。然后对于任意常数*k*[0]
    > 0，你可以写成
- en: '![art](images/Art_P1590.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1590.jpg)'
- en: since the initial terms of the summation are all constant and there are a constant
    number of them. You can then use other methods to bound ![art](images/Art_P1591.jpg).
    This technique applies to infinite summations as well. For example, let’s find
    an asymptotic upper bound on ![art](images/Art_P1592.jpg). The ratio of consecutive
    terms is
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 由于求和的初始项都是常数且数量是恒定的。然后你可以使用其他方法来限制![艺术](images/Art_P1591.jpg)。这种技术也适用于无限求和。例如，让我们找到![艺术](images/Art_P1592.jpg)的渐近上界。连续项的比值是
- en: '![art](images/Art_P1593.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1593.jpg)'
- en: if *k* ≥ 3\. Thus, you can split the summation into
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*k* ≥ 3。因此，你可以将求和分成
- en: '![art](images/Art_P1594.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1594.jpg)'
- en: 'The technique of splitting summations can help determine asymptotic bounds
    in much more difficult situations. For example, here is one way to obtain a bound
    of *O*(lg *n*) on the harmonic series (A.9):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 分割求和的技术可以帮助确定更困难情况下的渐近界限。例如，以下是一种在调和级数(A.9)上获得*O*(lg *n*)界限的方法：
- en: '![art](images/Art_P1595.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1595.jpg)'
- en: The idea is to split the range 1 to *n* into ⌊lg *n*⌋ + 1 pieces and upper-bound
    the contribution of each piece by 1\. For *i* = 0, 1, … , ⌊lg *n*⌋, the *i*th
    piece consists of the terms starting at 1/2^(*i*) and going up to but not including
    1/2^(*i*+1). The last piece might contain terms not in the original harmonic series,
    giving
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 思路是将范围1到*n*分成⌊lg *n*⌋ + 1个部分，并通过1来上界每个部分的贡献。对于*i* = 0, 1, … , ⌊lg *n*⌋，第*i*个部分包括从1/2^(*i*)开始直到但不包括1/2^(*i*+1)的项。最后一个部分可能包含原始调和级数中不存在的项，得到
- en: '![art](images/Art_P1596.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1596.jpg)'
- en: '**Approximation by integrals**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过积分进行近似**'
- en: 'When a summation has the form ![art](images/Art_P1597.jpg), where *f* (*k*)
    is a monotonically increasing function, you can approximate it by integrals:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个求和的形式为![艺术](images/Art_P1597.jpg)，其中*f*(*k*)是一个单调递增函数时，你可以通过积分来近似它：
- en: '![art](images/Art_P1598.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1598.jpg)'
- en: '[Figure A.1](#Fig_A-1) justifies this approximation. The summation is represented
    as the area of the rectangles in the figure, and the integral is the blue region
    under the curve. When *f* (*k*) is a monotonically decreasing function, you can
    use a similar method to provide the bounds'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 A.1](#Fig_A-1) 证明了这种近似的有效性。图中的矩形区域表示了求和的值，而积分则是曲线下的蓝色区域。当*f*(*k*)是一个单调递减函数时，你可以使用类似的方法来提供上下界。'
- en: '![art](images/Art_P1599.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1599.jpg)'
- en: The integral approximation (A.19) can be used to prove the tight bounds in inequality
    (A.10) for the *n*th harmonic number. The lower bound is
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 积分近似(A.19)可以用来证明不等式(A.10)对第*n*个调和数的紧密界限。下界为
- en: '![art](images/Art_P1600.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1600.jpg)'
- en: For the upper bound, the integral approximation gives
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上界，积分近似给出
- en: '![art](images/Art_P1601.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1601.jpg)'
- en: '**Exercises**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习**'
- en: '***A.2-1***'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '***A.2-1***'
- en: Show that ![art](images/Art_P1602.jpg) is bounded above by a constant.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 证明![艺术](images/Art_P1602.jpg)被一个常数上界所限制。
- en: '***A.2-2***'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '***A.2-2***'
- en: Find an asymptotic upper bound on the summation
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 找到求和的渐近上界
- en: '![art](images/Art_P1603.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1603.jpg)'
- en: '![art](images/Art_P1604.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![艺术](images/Art_P1604.jpg)'
- en: '**Figure A.1** Approximation of ![art](images/Art_P1605.jpg) by integrals.
    The area of each rectangle is shown within the rectangle, and the total rectangle
    area represents the value of the summation. The integral is represented by the
    blue area under the curve. Comparing areas in **(a)** gives the lower bound ![art](images/Art_P1606.jpg).
    Shifting the rectangles one unit to the right gives the upper bound ![art](images/Art_P1607.jpg)
    in **(b)**.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 A.1** 通过积分来近似![艺术](images/Art_P1605.jpg)。每个矩形的面积显示在矩形内部，总矩形面积代表了求和的值。积分由曲线下的蓝色区域表示。在**(a)**中比较面积给出了下界![艺术](images/Art_P1606.jpg)。将矩形向右移动一个单位得到了**(b)**中的上界![艺术](images/Art_P1607.jpg)。'
- en: '***A.2-3***'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '***A.2-3***'
- en: Show that the *n*th harmonic number is Ω(lg *n*) by splitting the summation.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分解求和来证明第*n*个调和数为Ω(lg *n*)。
- en: '***A.2-4***'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '***A.2-4***'
- en: Approximate ![art](images/Art_P1608.jpg) with an integral.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 用积分近似![艺术](images/Art_P1608.jpg)。
- en: '***A.2-5***'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '***A.2-5***'
- en: Why can’t you use the integral approximation (A.19) directly on ![art](images/Art_P1609.jpg)
    to obtain an upper bound on the *n*th harmonic number?
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不能直接在![艺术](images/Art_P1609.jpg)上使用积分近似(A.19)来得到第*n*个调和数的上界？
- en: '**Problems**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**'
- en: '***A-1 Bounding summations***'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '***A-1 求和的界限***'
- en: Give asymptotically tight bounds on the following summations. Assume that *r*
    ≥ 0 and *s* ≥ 0 are constants.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下求和给出渐近紧密的界限。假设*r* ≥ 0和*s* ≥ 0是常数。
- en: '***a.*** ![art](images/Art_P1610.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '***a.*** ![艺术](images/Art_P1610.jpg)'
- en: '***b.*** ![art](images/Art_P1611.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '***b.*** ![艺术](images/Art_P1611.jpg)'
- en: '***c.*** ![art](images/Art_P1612.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '***c.*** ![艺术](images/Art_P1612.jpg)'
- en: '**Appendix notes**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**附录注释**'
- en: Knuth [[259](bibliography001.xhtml#endnote_259)] provides an excellent reference
    for the material presented here. You can find basic properties of series in any
    good calculus book, such as Apostol [[19](bibliography001.xhtml#endnote_19)] or
    Thomas et al. [[433](bibliography001.xhtml#endnote_433)].
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Knuth [[259](bibliography001.xhtml#endnote_259)] 在这里提供了一个很好的参考资料。你可以在任何一本好的微积分书中找到关于级数的基本性质，比如
    Apostol [[19](bibliography001.xhtml#endnote_19)] 或 Thomas 等人 [[433](bibliography001.xhtml#endnote_433)]。
