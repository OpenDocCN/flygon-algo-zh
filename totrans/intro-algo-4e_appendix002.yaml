- en: '[**B Sets, Etc.**](toc.xhtml#app-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Many chapters of this book touch on the elements of discrete mathematics. This
    appendix reviews the notations, definitions, and elementary properties of sets,
    relations, functions, graphs, and trees. If you are already well versed in this
    material, you can probably just skim this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[**B.1 Sets**](toc.xhtml#Rh1-218)'
  prefs: []
  type: TYPE_NORMAL
- en: A ***set*** is a collection of distinguishable objects, called its ***members***
    or ***elements***. If an object *x* is a member of a set *S*, we write *x* ∈ *S*
    (read “*x* is a member of *S*” or, more briefly, “*x* belongs to *S*”). If *x*
    is not a member of *S*, we write *x* ∉ *S*. To describe a set explicitly, write
    its members as a list inside braces. For example, to define a set *S* to contain
    precisely the numbers 1, 2, and 3, write *S* = {1, 2, 3}. Since 2 belongs to the
    set *S*, we can write 2 ∈ *S*, and since 4 is not a member, we can write 4 ∉ *S*.
    A set cannot contain the same object more than once,^([1](#footnote_1)) and its
    elements are not ordered. Two sets *A* and *B* are ***equal***, written *A* =
    *B*, if they contain the same elements. For example, {1, 2, 3, 1} = {1, 2, 3}
    = {3, 2, 1}.
  prefs: []
  type: TYPE_NORMAL
- en: 'We adopt special notations for frequently encountered sets:'
  prefs: []
  type: TYPE_NORMAL
- en: Ø denotes the ***empty set***, that is, the set containing no members.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ℤ denotes the set of ***integers***, that is, the set {… −2, −1, 0, 1, 2,…}.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ℝ denotes the set of ***real numbers***.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ℕ denotes the set of ***natural numbers***, that is, the set {0, 1, 2,…}.^([2](#footnote_2))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If all the elements of a set *A* are contained in a set *B*, that is, if *x*
    ∈ *A* implies *x* ∈ *B*, then we write *A* ⊆ *B* and say that *A* is a ***subset***
    of *B*. A set *A* is a ***proper subset*** of set *B*, written *A* ⊂ *B*, if *A*
    ⊆ *B* but *A* ≠ *B*. (Some authors use the symbol “⊂” to denote the ordinary subset
    relation, rather than the proper-subset relation.) Every set is a subset of itself:
    *A* ⊆ *A* for any set *A*. For two sets *A* and *B*, we have *A* = *B* if and
    only if *A* ⊆ *B* and *B* ⊆ *A*. The subset relation is transitive (see page 1159):
    for any three sets *A*, *B*, and *C*, if *A* ⊆ *B* and *B* ⊆ *C*, then *A* ⊆ *C*.
    The proper-subset relation is transitive as well. The empty set is a subset of
    all sets: for any set *A*, we have Ø ⊆ *A*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sets can be specified in terms of other sets. Given a set *A*, a set *B* ⊆
    *A* can be defined by stating a property that distinguishes the elements of *B*.
    For example, one way to define the set of even integers is {*x* : *x* ∈ ℤ and
    *x*/2 is an integer}. The colon in this notation is read “such that.” (Some authors
    use a vertical bar in place of the colon.)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Given two sets *A* and *B*, ***set operations*** define new sets:'
  prefs: []
  type: TYPE_NORMAL
- en: The ***intersection*** of sets *A* and *B* is the set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A* ∩ *B* = {*x* : *x* ∈ *A* and *x* ∈ *B*}.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The ***union*** of sets *A* and *B* is the set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A* ∪ *B* = {*x* : *x* ∈ *A* or *x* ∈ *B*}.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The ***difference*** between two sets *A* and *B* is the set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A* − *B* = {*x* : *x* ∈ *A* and *x* ∉ *B*}.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set operations obey the following laws:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Empty set laws:**'
  prefs: []
  type: TYPE_NORMAL
- en: '| *A* ∩ Ø | = | Ø, |'
  prefs: []
  type: TYPE_TB
- en: '| *A* ∪ Ø | = | *A.* |'
  prefs: []
  type: TYPE_TB
- en: '**Idempotency laws:**'
  prefs: []
  type: TYPE_NORMAL
- en: '| *A* ∩ *A* | = | *A*, |'
  prefs: []
  type: TYPE_TB
- en: '| *A* ∪ *A* | = | *A.* |'
  prefs: []
  type: TYPE_TB
- en: '**Commutative laws:**'
  prefs: []
  type: TYPE_NORMAL
- en: '| *A* ∩ *B* | = | *B* ∩ *A*, |'
  prefs: []
  type: TYPE_TB
- en: '| *A* ∪ *B* | = | *B* ∪ *A*. |'
  prefs: []
  type: TYPE_TB
- en: '![art](images/Art_P1613.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure B.1** A Venn diagram illustrating the first of DeMorgan’s laws (B.2).
    Each of the sets *A*, *B*, and *C* is represented as a circle.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Associative laws:**'
  prefs: []
  type: TYPE_NORMAL
- en: '| *A* ∩ (*B* ∩ *C*) | = | (*A* ∩ *B*) ∩ *C*, |'
  prefs: []
  type: TYPE_TB
- en: '| *A* ∪ (*B* ∪ *C*) | = | (*A* ∪ *B*) ∪ *C.* |'
  prefs: []
  type: TYPE_TB
- en: '**Distributive laws:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![art](images/Art_P1614.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Absorption laws:**'
  prefs: []
  type: TYPE_NORMAL
- en: '| *A* ∩ (*A* ∪ *B*) | = | *A*, |'
  prefs: []
  type: TYPE_TB
- en: '| *A* ∪ (*A* ∩ *B*) | = | *A.* |'
  prefs: []
  type: TYPE_TB
- en: '**DeMorgan’s laws:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![art](images/Art_P1615.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure B.1](#Fig_B-1) illustrates the first of DeMorgan’s laws, using a ***Venn
    diagram***: a graphical picture in which sets are represented as regions of the
    plane.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Often, all the sets under consideration are subsets of some larger set *U*
    called the ***universe***. For example, when considering various sets made up
    only of integers, the set ℤ of integers is an appropriate universe. Given a universe
    *U*, we define the ***complement*** of a set *A* as *Ā* = *U* − *A* = {*x* : *x*
    ∈ *U* and *x* ∉ *A*}. For any set *A* ⊆ *U*, we have the following laws:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ![art](images/Art_P1616.jpg) | = | *A*, |'
  prefs: []
  type: TYPE_TB
- en: '| *A* ∩ *Ā* | = | Ø, |'
  prefs: []
  type: TYPE_TB
- en: '| *A* ∪ *Ā* | = | *U*. |'
  prefs: []
  type: TYPE_TB
- en: An equivalent way to express DeMorgan’s laws (B.2) uses set complements. For
    any two sets *B, C* ⊆ *U*, we have
  prefs: []
  type: TYPE_NORMAL
- en: '| *B* ∩ *C* | = | *B* ∪ *C*, |'
  prefs: []
  type: TYPE_TB
- en: '| *B* ∪ *C* | = | *B* ∩ *C*. |'
  prefs: []
  type: TYPE_TB
- en: Two sets *A* and *B* are ***disjoint*** if they have no elements in common,
    that is, if *A* ∩ *B* = Ø. A ***collection*** of sets *S*[1], *S*[2], … , either
    finite or infinite, is a set of sets, in which each member is a set *S[i]*. A
    collection S = {*S[i]*} of nonempty sets forms a ***partition*** of a set *S*
    if
  prefs: []
  type: TYPE_NORMAL
- en: the sets are ***pairwise disjoint***, that is, *S[i]*, *S[j]* ∈ S and *i* ≠
    *j* imply *S[i]* ∩ *S[j]* = Ø,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: their union is *S*, that is,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![art](images/Art_P1617.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In other words, S forms a partition of *S* if each element of *S* appears in
    exactly one set *S[i]* ∈ S.
  prefs: []
  type: TYPE_NORMAL
- en: The number of elements in a set is the ***cardinality*** (or ***size***) of
    the set, denoted |*S*|. Two sets have the same cardinality if their elements can
    be put into a one-to-one correspondence. The cardinality of the empty set is |Ø|
    = 0\. If the cardinality of a set is a natural number, the set is ***finite***,
    and otherwise, it is ***infinite***. An infinite set that can be put into a one-to-one
    correspondence with the natural numbers ℕ is ***countably infinite***, and otherwise,
    it is ***uncountable***. For example, the integers ℤ are countable, but the reals
    ℝ are uncountable.
  prefs: []
  type: TYPE_NORMAL
- en: For any two finite sets *A* and *B*, we have the identity
  prefs: []
  type: TYPE_NORMAL
- en: '![art](images/Art_P1618.jpg)'
  prefs: []
  type: TYPE_IMG
- en: from which we can conclude that
  prefs: []
  type: TYPE_NORMAL
- en: '|*A* ∪ *B*| ≤ |*A*| + |*B*|.'
  prefs: []
  type: TYPE_NORMAL
- en: If *A* and *B* are disjoint, then |*A* ∩ *B*| = 0 and thus |*A* ∪ *B*| = |*A*|
    + |*B*|. If *A* ⊆ *B*, then |*A*| ≤ |*B*|.
  prefs: []
  type: TYPE_NORMAL
- en: A finite set of *n* elements is sometimes called an ***n-set***. A 1-set is
    called a ***singleton***. A subset of *k* elements of a set is sometimes called
    a ***k-subset***.
  prefs: []
  type: TYPE_NORMAL
- en: We denote the set of all subsets of a set *S*, including the empty set and *S*
    itself, by 2^(*S*), called the ***power set*** of *S*. For example, 2^({*a*,*b*})
    = {Ø, {*a*}, {*b*}, {*a, b*}}. The power set of a finite set *S* has cardinality
    2^(|*S*|) (see Exercise B.1-5).
  prefs: []
  type: TYPE_NORMAL
- en: We sometimes care about setlike structures in which the elements are ordered.
    An ***ordered pair*** of two elements *a* and *b* is denoted (*a*, *b*) and is
    defined formally as the set (*a*, *b*) = {*a,* {*a, b*}}. Thus, the ordered pair
    (*a*, *b*) is *not* the same as the ordered pair (*b*, *a*).
  prefs: []
  type: TYPE_NORMAL
- en: The ***Cartesian product*** of two sets *A* and *B*, denoted *A* × *B*, is the
    set of all ordered pairs such that the first element of the pair is an element
    of *A* and the second is an element of *B*. More formally,
  prefs: []
  type: TYPE_NORMAL
- en: '*A* × *B* = {(*a*, *b*) : *a* ∈ *A* and *b* ∈ *B*}.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, {*a, b*}×{*a, b, c*} = {(*a*, *a*), (*a, b*), (*a, c*), (*b, a*),
    (*b, b*), (*b, c*)}. When *A* and *B* are finite sets, the cardinality of their
    Cartesian product is
  prefs: []
  type: TYPE_NORMAL
- en: '![art](images/Art_P1619.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Cartesian product of *n* sets *A*[1], *A*[2], … , *A[n]* is the set of ***n-tuples***
  prefs: []
  type: TYPE_NORMAL
- en: '*A*[1] × *A*[2] × … × *A[n]* = {(*a*[1], *a*[2], … , *a[n]*) : *a[i]* ∈ *A[i]*
    for *i* = 1, 2, … , *n*},'
  prefs: []
  type: TYPE_NORMAL
- en: whose cardinality is
  prefs: []
  type: TYPE_NORMAL
- en: '|*A*[1] × *A*[2] × … × *A[n]*| = |*A*[1]| · |*A*[2]| · |*A[n]*|'
  prefs: []
  type: TYPE_NORMAL
- en: if all sets *A[i]* are finite. We denote an *n*-fold Cartesian product over
    a single set *A* by the set
  prefs: []
  type: TYPE_NORMAL
- en: '![art](images/Art_P1620.jpg)'
  prefs: []
  type: TYPE_IMG
- en: whose cardinality is |*A^n*| = |*A*|*^n* if *A* is finite. We can also view
    an *n*-tuple as a finite sequence of length *n* (see page 1162).
  prefs: []
  type: TYPE_NORMAL
- en: 'Intervals are continuous sets of real numbers. We denote them with parentheses
    and/or brackets. Given real numbers *a* and *b*, the ***closed interval*** [*a,
    b*] is the set {*x* ∈ ℝ : *a* ≤ *x* ≤ *b*} of reals between *a* and *b*, including
    both *a* and *b*. (If *a* > *b*, this definition implies that [*a, b*] = Ø.) The
    ***open interval*** (*a*, *b*) = {*x* ∈ ℝ : *a* < *x* < *b*} omits both of the
    endpoints from the set. There are two ***half-open intervals*** [*a, b*) = {*x*
    ∈ ℝ : *a* ≤ *x* < *b*} and (*a*, *b*] = {*x* ∈ ℝ : *a* < *x* ≤ *b*}, each of which
    excludes one endpoint.'
  prefs: []
  type: TYPE_NORMAL
- en: Intervals can also be defined on the integers by replacing ℝ in the these definitions
    by ℤ. Whether the interval is defined over the reals or integers can usually be
    inferred from context.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises**'
  prefs: []
  type: TYPE_NORMAL
- en: '***B.1-1***'
  prefs: []
  type: TYPE_NORMAL
- en: Draw Venn diagrams that illustrate the first of the distributive laws (B.1).
  prefs: []
  type: TYPE_NORMAL
- en: '***B.1-2***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Prove the generalization of DeMorgan’s laws to any finite collection of sets:'
  prefs: []
  type: TYPE_NORMAL
- en: '| *A*[1] ∩ *A*[2] ∩ … ∩ *A[n]* | = | *A*[1] ∪ *A*[2] ∪ … ∪ *A[*n*]*, |'
  prefs: []
  type: TYPE_TB
- en: '| *A*[1] ∪ *A*[2] ∪ … ∪ *A[n]* | = | *A*[1] ∩ *A*[2] ∩ … ∩ *A[*n*].* |'
  prefs: []
  type: TYPE_TB
- en: ★ ***B.1-3***
  prefs: []
  type: TYPE_NORMAL
- en: 'Prove the generalization of equation (B.3), which is called the ***principle
    of inclusion and exclusion***:'
  prefs: []
  type: TYPE_NORMAL
- en: '| &#124;*A*[1] ∪ *A*[2] ∪ … ∪ *A[n]*&#124; = |'
  prefs: []
  type: TYPE_TB
- en: '|  | &#124;*A*[1]&#124; + &#124;*A*[2]&#124; + … + &#124;*A[n]*&#124; |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | − &#124;*A*[1] ∩ *A*[2]&#124; − &#124;*A*[1] ∩ *A*[3]&#124; − … | (all
    pairs) |'
  prefs: []
  type: TYPE_TB
- en: '|  | + &#124;*A*[1] ∩ *A*[2] ∩ *A*[3]&#124; + … | (all triples) |'
  prefs: []
  type: TYPE_TB
- en: '|  | ⋮ |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | + (−1)^(*n*−1) &#124;*A*[1] ∩ *A*[2] ∩ … ∩ *A[n]*&#124;. |  |'
  prefs: []
  type: TYPE_TB
- en: '***B.1-4***'
  prefs: []
  type: TYPE_NORMAL
- en: Show that the set of odd natural numbers is countable.
  prefs: []
  type: TYPE_NORMAL
- en: '***B.1-5***'
  prefs: []
  type: TYPE_NORMAL
- en: Show that for any finite set *S*, the power set 2^(*S*) has 2^(|*S*|) elements
    (that is, there are 2^(|*S*|) distinct subsets of *S*).
  prefs: []
  type: TYPE_NORMAL
- en: '***B.1-6***'
  prefs: []
  type: TYPE_NORMAL
- en: Give an inductive definition for an *n*-tuple by extending the set-theoretic
    definition for an ordered pair.
  prefs: []
  type: TYPE_NORMAL
- en: '[**B.2 Relations**](toc.xhtml#Rh1-219)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A ***binary relation*** *R* on two sets *A* and *B* is a subset of the Cartesian
    product *A*×*B*. If (*a*, *b*) ∈ *R*, we sometimes write *a R b*. When we say
    that *R* is a binary relation on a set *A*, we mean that *R* is a subset of *A*
    × *A*. For example, the “less than” relation on the natural numbers is the set
    {(*a*, *b*) : *a, b* ∈ ℕ and *a* < *b*}. An *n*-ary relation on sets *A*[1], *A*[2],
    … , *A[n]* is a subset of *A*[1] × *A*[2] × … × *A[n]*.'
  prefs: []
  type: TYPE_NORMAL
- en: A binary relation *R* ⊆ *A* × *A* is ***reflexive*** if
  prefs: []
  type: TYPE_NORMAL
- en: '*a R a*'
  prefs: []
  type: TYPE_NORMAL
- en: for all *a* ∈ *A*. For example, “=” and “≤” are reflexive relations on ℕ, but
    “<” is not. The relation *R* is ***symmetric*** if
  prefs: []
  type: TYPE_NORMAL
- en: '*a R b* implies *b R a*'
  prefs: []
  type: TYPE_NORMAL
- en: for all *a, b* ∈ *A*. For example, “=” is symmetric, but “<” and “≤” are not.
    The relation *R* is ***transitive*** if
  prefs: []
  type: TYPE_NORMAL
- en: '*a R b* and *b R c* imply *a R c*'
  prefs: []
  type: TYPE_NORMAL
- en: 'for all *a, b, c* ∈ *A*. For example, the relations “<,” “≤,” and “=” are transitive,
    but the relation *R* = {(*a*, *b*) : *a, b* ∈ ℕ and *a* = *b* − 1} is not, since
    3 *R* 4 and 4 *R* 5 do not imply 3 *R* 5.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A relation that is reflexive, symmetric, and transitive is an ***equivalence
    relation***. For example, “=” is an equivalence relation on the natural numbers,
    but “<” is not. If *R* is an equivalence relation on a set *A*, then for *a* ∈
    *A*, the ***equivalence class*** of *a* is the set [*a*] = {*b* ∈ *A* : *a R b*},
    that is, the set of all elements equivalent to *a*. For example, if we define
    *R* = {(*a*, *b*) : *a, b* ∈ ℕ and *a* + *b* is an even number}, then *R* is an
    equivalence relation, since *a* + *a* is even (reflexive), *a* + *b* is even implies
    *b* + *a* is even (symmetric), and *a* + *b* is even and *b* + *c* is even imply
    *a* + *c* is even (transitive). The equivalence class of 4 is [4] = {0, 2, 4,
    6,…}, and the equivalence class of 3 is [3] = {1, 3, 5, 7,…}. A basic theorem
    of equivalence classes is the following.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Theorem B.1 (An equivalence relation is the same as a partition)***'
  prefs: []
  type: TYPE_NORMAL
- en: The equivalence classes of any equivalence relation *R* on a set *A* form a
    partition of *A*, and any partition of *A* determines an equivalence relation
    on *A* for which the sets in the partition are the equivalence classes.
  prefs: []
  type: TYPE_NORMAL
- en: '***Proof***   For the first part of the proof, we must show that the equivalence
    classes of *R* are nonempty, pairwise-disjoint sets whose union is *A*. Because
    *R* is reflexive, *a* ∈ [*a*], and so the equivalence classes are nonempty. Moreover,
    since every element *a* ∈ *A* belongs to the equivalence class [*a*], the union
    of the equivalence classes is *A*. It remains to show that the equivalence classes
    are pairwise disjoint, that is, if two equivalence classes [*a*] and [*b*] have
    an element *c* in common, then they are in fact the same set. Suppose that *a
    R c* and *b R c*. Symmetry gives that *c R b* and, by transitivity, *a R b*. Thus,
    we have *x R a* for any arbitrary element *x* ∈ [*a*] and, by transitivity, *x
    R b*, and thus [*a*] ⊆ [*b*]. Similarly, [*b*] ⊆ [*a*], and thus [*a*] = [*b*].'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the second part of the proof, let A = {*A[i]*} be a partition of *A*, and
    define *R* = {(*a*, *b*) : there exists *i* such that *a* ∈ *A[i]* and *b* ∈ *A[i]*}.
    We claim that *R* is an equivalence relation on *A*. Reflexivity holds, since
    *a* ∈ *A[i]* implies *a R a*. Symmetry holds, because if *a R b*, then *a* and
    *b* belong to the same set *A[i]*, and hence *b R a*. If *a R b* and *b R c*,
    then all three elements are in the same set *A[i]*, and thus *a R c* and transitivity
    holds. To see that the sets in the partition are the equivalence classes of *R*,
    observe that if *a* ∈ *A[i]*, then *x* ∈ [*a*] implies *x* ∈ *A[i]*, and *x* ∈
    *A[i]* implies *x* ∈ [*a*].'
  prefs: []
  type: TYPE_NORMAL
- en: ▪
  prefs: []
  type: TYPE_NORMAL
- en: A binary relation *R* on a set *A* is ***antisymmetric*** if
  prefs: []
  type: TYPE_NORMAL
- en: '*a R b* and *b R a* imply *a* = *b*.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, the “≤” relation on the natural numbers is antisymmetric, since
    *a* ≤ *b* and *b* ≤ *a* imply *a* = *b*. A relation that is reflexive, antisymmetric,
    and transitive is a ***partial order***, and we call a set on which a partial
    order is defined a ***partially ordered set***. For example, the relation “is
    a descendant of” is a partial order on the set of all people (if we view individuals
    as being their own descendants).
  prefs: []
  type: TYPE_NORMAL
- en: In a partially ordered set *A*, there may be no single “maximum” element *a*
    such that *b R a* for all *b* ∈ *A*. Instead, the set may contain several ***maximal***
    elements *a* such that for no *b* ∈ *A*, where *b* ≠ *a*, is it the case that
    *a R b*. For example, a collection of different-sized boxes may contain several
    maximal boxes that don’t fit inside any other box, yet it has no single “maximum”
    box into which any other box will fit.^([3](#footnote_3))
  prefs: []
  type: TYPE_NORMAL
- en: A relation *R* on a set *A* is a ***total relation*** if for all *a, b* ∈ *A*,
    we have *a R b* or *b R a* (or both), that is, if every pairing of elements of
    *A* is related by *R*. A partial order that is also a total relation is a ***total
    order*** or ***linear order***. For example, the relation “≤” is a total order
    on the natural numbers, but the “is a descendant of” relation is not a total order
    on the set of all people, since there are individuals neither of whom is descended
    from the other. A total relation that is transitive, but not necessarily either
    symmetric or antisymmetric, is a ***total preorder***.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises**'
  prefs: []
  type: TYPE_NORMAL
- en: '***B.2-1***'
  prefs: []
  type: TYPE_NORMAL
- en: Prove that the subset relation “⊆” on all subsets of ℤ is a partial order but
    not a total order.
  prefs: []
  type: TYPE_NORMAL
- en: '***B.2-2***'
  prefs: []
  type: TYPE_NORMAL
- en: Show that for any positive integer *n*, the relation “equivalent modulo *n*”
    is an equivalence relation on the integers. (We say that *a* = *b* (mod *n*) if
    there exists an integer *q* such that *a* − *b* = *qn*.) Into what equivalence
    classes does this relation partition the integers?
  prefs: []
  type: TYPE_NORMAL
- en: '***B.2-3***'
  prefs: []
  type: TYPE_NORMAL
- en: Give examples of relations that are
  prefs: []
  type: TYPE_NORMAL
- en: '***a.*** reflexive and symmetric but not transitive,'
  prefs: []
  type: TYPE_NORMAL
- en: '***b.*** reflexive and transitive but not symmetric,'
  prefs: []
  type: TYPE_NORMAL
- en: '***c.*** symmetric and transitive but not reflexive.'
  prefs: []
  type: TYPE_NORMAL
- en: '***B.2-4***'
  prefs: []
  type: TYPE_NORMAL
- en: Let *S* be a finite set, and let *R* be an equivalence relation on *S* × *S*.
    Show that if in addition *R* is antisymmetric, then the equivalence classes of
    *S* with respect to *R* are singletons.
  prefs: []
  type: TYPE_NORMAL
- en: '***B.2-5***'
  prefs: []
  type: TYPE_NORMAL
- en: Professor Narcissus claims that if a relation *R* is symmetric and transitive,
    then it is also reflexive. He offers the following proof. By symmetry, *a R b*
    implies *b R a*. Transitivity, therefore, implies *a R a*. Is the professor correct?
  prefs: []
  type: TYPE_NORMAL
- en: '[**B.3 Functions**](toc.xhtml#Rh1-220)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Given two sets *A* and *B*, a ***function*** *f* is a binary relation on *A*
    and *B* such that for all *a* ∈ *A*, there exists precisely one *b* ∈ *B* such
    that (*a*, *b*) ∈ *f*. The set *A* is called the ***domain*** of *f*, and the
    set *B* is called the ***codomain*** of *f*. We sometimes write *f* : *A* → *B*,
    and if (*a*, *b*) ∈ *f*, we write *b* = *f* (*a*), since the choice of *a* uniquely
    determines *b*.'
  prefs: []
  type: TYPE_NORMAL
- en: Intuitively, the function *f* assigns an element of *B* to each element of *A*.
    No element of *A* is assigned two different elements of *B*, but the same element
    of *B* can be assigned to two different elements of *A*. For example, the binary
    relation
  prefs: []
  type: TYPE_NORMAL
- en: '*f* = {(*a*, *b*) : *a, b* ∈ ℕ and *b* = *a* mod 2}'
  prefs: []
  type: TYPE_NORMAL
- en: 'is a function *f* : → {0, 1}, since for each natural number *a*, there is exactly
    one value *b* in {0, 1} such that *b* = *a* mod 2\. For this example, 0 = *f*
    (0), 1 = *f* (1), 0 = *f* (2), 1 = *f* (3), etc. In contrast, the binary relation'
  prefs: []
  type: TYPE_NORMAL
- en: '*g* = {(*a*, *b*) : *a, b* ∈ ℕ and *a* + *b* is even}'
  prefs: []
  type: TYPE_NORMAL
- en: is not a function, since (1, 3) and (1, 5) are both in *g*, and thus for the
    choice *a* = 1, there is not precisely one *b* such that (*a*, *b*) ∈ *g*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a function *f* : *A* → *B*, if *b* = *f* (*a*), we say that *a* is the
    ***argument*** of *f* and that *b* is the ***value*** of *f* at *a*. We can define
    a function by stating its value for every element of its domain. For example,
    we might define *f* (*n*) = 2*n* for *n* ∈ ℕ, which means *f* = {(*n*, 2*n*) :
    *n* ∈ ℕ}. Two functions *f* and *g* are ***equal*** if they have the same domain
    and codomain and if *f* (*a*) = *g*(*a*) for all *a* in the domain.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A ***finite sequence*** of length *n* is a function *f* whose domain is the
    set of *n* integers {0, 1, … , *n* − 1}. We often denote a finite sequence by
    listing its values in angle brackets: 〈*f* (0), *f* (1), … , *f* (*n*−1)〉. An
    ***infinite sequence*** is a function whose domain is the set ℕ of natural numbers.
    For example, the Fibonacci sequence, defined by recurrence (3.31), is the infinite
    sequence 〈0, 1, 1, 2, 3, 5, 8, 13, 21,…〉.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the domain of a function *f* is a Cartesian product, we often omit the
    extra parentheses surrounding the argument of *f*. For example, if we have a function
    *f* : *A*[1] × *A*[2] × … *A*[*n*] → *B*, we write *b* = *f* (*a*[1], *a*[2],
    … *a[n]*) instead of writing *b* = *f* ((*a*[1], *a*[2], … *a[n]*)). We also call
    each *a[i]* an ***argument*** to the function *f*, though technically *f* has
    just a single argument, which is the *n*-tuple (*a*[1], *a*[2], … *a*[*n*]).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If *f* : *A* → *B* is a function and *b* = *f* (*a*), then we sometimes say
    that *b* is the ***image*** of *a* under *f*. The image of a set *A*′ ⊆ *A* under
    *f* is defined by'
  prefs: []
  type: TYPE_NORMAL
- en: '*f* (*A*′) = {*b* ∈ *B* : *b* = *f* (*a*) for some *a* ∈ *A*′}.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ***range*** of *f* is the image of its domain, that is, *f* (*A*). For
    example, the range of the function *f* : ℕ → ℕ defined by *f* (*n*) = 2*n* is
    *f*(ℕ) = {*m* : *m* = 2*n* for some *n* ∈ ℕ}, in other words, the set of nonnegative
    even integers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A function is a ***surjection*** if its range is its codomain. For example,
    the function *f* (*n*) = ⌊*n*/2⌋ is a surjective function from ℕ to ℕ, since every
    element in ℕ appears as the value of *f* for some argument. In contrast, the function
    *f* (*n*) = 2*n* is not a surjective function from ℕ to ℕ, since no argument to
    *f* can produce any odd natural number as a value. The function *f* (*n*) = 2*n*
    is, however, a surjective function from the natural numbers to the even numbers.
    A surjection *f* : *A* → *B* is sometimes described as mapping *A **onto** B*.
    When we say that *f* is onto, we mean that it is surjective.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A function *f* : *A* → *B* is an ***injection*** if distinct arguments to *f*
    produce distinct values, that is, if *a* ≠ *a*′ implies *f* (*a*) ≠ *f* (*a*′).
    For example, the function *f* (*n*) = 2*n* is an injective function from ℕ to
    ℕ, since each even number *b* is the image under *f* of at most one element of
    the domain, namely *b*/2\. The function *f* (*n*) = ⌊*n*/2⌋ is not injective,
    since the value 1 is produced by two arguments: *f* (2) = 1 and *f* (3) = 1\.
    An injection is sometimes called a ***one-to-one*** function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A function *f* : *A* → *B* is a ***bijection*** if it is injective and surjective.
    For example, the function *f* (*n*) = (−1)*^n*⌈*n*/2⌉ is a bijection from ℕ to
    ℤ:'
  prefs: []
  type: TYPE_NORMAL
- en: '| 0 | → | 0, |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | → | −1, |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | → | 1, |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | → | −2, |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | → | 2, |'
  prefs: []
  type: TYPE_TB
- en: '|  | ⋮ |  |'
  prefs: []
  type: TYPE_TB
- en: The function is injective, since no element of ℤ is the image of more than one
    element of ℕ. It is surjective, since every element of ℤ appears as the image
    of some element of ℕ. Hence, the function is bijective. A bijection is sometimes
    called a ***one-to-one correspondence***, since it pairs elements in the domain
    and codomain. A bijection from a set *A* to itself is sometimes called a ***permutation***.
  prefs: []
  type: TYPE_NORMAL
- en: When a function *f* is bijective, we define its ***inverse*** *f*^(−1) as
  prefs: []
  type: TYPE_NORMAL
- en: '*f* ^(−1)(*b*) = *a* if and only if *f* (*a*) = *b*.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, the inverse of the function *f* (*n*) = (−1)*^n*⌈*n*/2⌉ is
  prefs: []
  type: TYPE_NORMAL
- en: '![art](images/Art_P1621.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Exercises**'
  prefs: []
  type: TYPE_NORMAL
- en: '***B.3-1***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let *A* and *B* be finite sets, and let *f* : *A* → *B* be a function. Show
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '***a.*** If *f* is injective, then |*A*| ≤ |*B*|.'
  prefs: []
  type: TYPE_NORMAL
- en: '***b.*** If *f* is surjective, then |*A*| ≥ |*B*|.'
  prefs: []
  type: TYPE_NORMAL
- en: '***B.3-2***'
  prefs: []
  type: TYPE_NORMAL
- en: Is the function *f* (*x*) = *x* + 1 bijective when the domain and the codomain
    are the set ℕ? Is it bijective when the domain and the codomain are the set ℤ?
  prefs: []
  type: TYPE_NORMAL
- en: '***B.3-3***'
  prefs: []
  type: TYPE_NORMAL
- en: Give a natural definition for the inverse of a binary relation such that if
    a relation is in fact a bijective function, its relational inverse is its functional
    inverse.
  prefs: []
  type: TYPE_NORMAL
- en: ★ ***B.3-4***
  prefs: []
  type: TYPE_NORMAL
- en: Give a bijection from ℤ to ℤ × ℤ.
  prefs: []
  type: TYPE_NORMAL
- en: '[**B.4 Graphs**](toc.xhtml#Rh1-221)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This section presents two kinds of graphs: directed and undirected. Certain
    definitions in the literature differ from those given here, but for the most part,
    the differences are slight. [Section 20.1](chapter020.xhtml#Sec_20.1) shows how
    to represent graphs in computer memory.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A ***directed graph*** (or ***digraph***) *G* is a pair (*V*, *E*), where *V*
    is a finite set and *E* is a binary relation on *V*. The set *V* is called the
    ***vertex set*** of *G*, and its elements are called ***vertices*** (singular:
    ***vertex***). The set *E* is called the ***edge set*** of *G*, and its elements
    are called ***edges***. [Figure B.2(a)](#Fig_B-2) is a pictorial representation
    of a directed graph on the vertex set {1, 2, 3, 4, 5, 6}. Vertices are represented
    by circles in the figure, and edges are represented by arrows. ***Self-loops***—edges
    from a vertex to itself—are possible.'
  prefs: []
  type: TYPE_NORMAL
- en: In an ***undirected graph*** *G* = (*V*, *E*), the edge set *E* consists of
    *unordered* pairs of vertices, rather than ordered pairs. That is, an edge is
    a set {*u, v*}, where *u, v* ∈ *V* and *u* ≠ *v*. By convention, we use the notation
    (*u*, *v*) for an edge, rather than the set notation {*u, v*}, and we consider
    (*u*, *v*) and (*v*, *u*) to be the same edge. In an undirected graph, self-loops
    are forbidden, so that every edge consists of two distinct vertices. [Figure B.2(b)](#Fig_B-2)
    shows an undirected graph on the vertex set {1, 2, 3, 4, 5, 6}.
  prefs: []
  type: TYPE_NORMAL
- en: '![art](images/Art_P1622.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure B.2** Directed and undirected graphs. **(a)** A directed graph *G*
    = (*V*, *E*), where *V* = {1, 2, 3, 4, 5, 6} and *E* = {(1, 2), (2, 2), (2, 4),
    (2, 5), (4, 1), (4, 5), (5, 4), (6, 3)}. The edge (2, 2) is a self-loop. **(b)**
    An undirected graph *G* = (*V*, *E*), where *V* = {1, 2, 3, 4, 5, 6} and *E* =
    {(1, 2), (1, 5), (2, 5), (3, 6)}. The vertex 4 is isolated. **(c)** The subgraph
    of the graph in part (a) induced by the vertex set {1, 2, 3, 6}.'
  prefs: []
  type: TYPE_NORMAL
- en: Many definitions for directed and undirected graphs are the same, although certain
    terms have slightly different meanings in the two contexts. If (*u*, *v*) is an
    edge in a directed graph *G* = (*V*, *E*), we say that (*u*, *v*) is ***incident
    from*** or ***leaves*** vertex *u* and is ***incident to*** or ***enters*** vertex
    *v*. For example, the edges leaving vertex 2 in [Figure B.2(a)](#Fig_B-2) are
    (2, 2), (2, 4), and (2, 5). The edges entering vertex 2 are (1, 2) and (2, 2).
    If (*u*, *v*) is an edge in an undirected graph *G* = (*V*, *E*), we say that
    (*u*, *v*) is ***incident on*** vertices *u* and *v*. In [Figure B.2(b)](#Fig_B-2),
    the edges incident on vertex 2 are (1, 2) and (2, 5).
  prefs: []
  type: TYPE_NORMAL
- en: If (*u*, *v*) is an edge in a graph *G* = (*V*, *E*), we say that vertex *v*
    is ***adjacent*** to vertex *u*. When the graph is undirected, the adjacency relation
    is symmetric. When the graph is directed, the adjacency relation is not necessarily
    symmetric. If *v* is adjacent to *u* in a directed graph, we can write *u* → *v*.
    In parts (a) and (b) of [Figure B.2](#Fig_B-2), vertex 2 is adjacent to vertex
    1, since the edge (1, 2) belongs to both graphs. Vertex 1 is *not* adjacent to
    vertex 2 in [Figure B.2(a)](#Fig_B-2), since the edge (2, 1) is absent.
  prefs: []
  type: TYPE_NORMAL
- en: The ***degree*** of a vertex in an undirected graph is the number of edges incident
    on it. For example, vertex 2 in [Figure B.2(b)](#Fig_B-2) has degree 2\. A vertex
    whose degree is 0, such as vertex 4 in [Figure B.2(b)](#Fig_B-2), is ***isolated***.
    In a directed graph, the ***out-degree*** of a vertex is the number of edges leaving
    it, and the ***in-degree*** of a vertex is the number of edges entering it. The
    ***degree*** of a vertex in a directed graph is its in-degree plus its out-degree.
    Vertex 2 in [Figure B.2(a)](#Fig_B-2) has in-degree 2, out-degree 3, and degree
    5.
  prefs: []
  type: TYPE_NORMAL
- en: A ***path*** of ***length*** *k* from a vertex *u* to a vertex *u*′ in a graph
    *G* = (*V*, *E*) is a sequence 〈*v*[0], *v*[1], *v*[2], … , *v[k]*〉 of vertices
    such that *u* = *v*[0], *u*′ = *v[k]*, and (*v*[*i*−1], *v[i]*) ∈ *E* for *i*
    = 1, 2, … , *k*. The length of the path is the number of edges in the path, which
    is 1 less than the number of vertices in the path. The path ***contains*** the
    vertices *v*[0], *v*[1], … , *v[k]* and the edges (*v*[0], *v*[1]), (*v*[1], *v*[2]),
    … , (*v*[*k*−1], *v[k]*). (There is always a 0-length path from *u* to *u*.) If
    there is a path *p* from *u* to *u*′, we say that *u*′ is ***reachable*** from
    *u* via *p*, which we can write as ![art](images/Art_P1623.jpg). A path is ***simple***^([4](#footnote_4))
    if all vertices in the path are distinct. In [Figure B.2(a)](#Fig_B-2), the path
    〈1, 2, 5, 4〉 is a simple path of length 3\. The path 〈2, 5, 4, 5〉 is not simple.
    A ***subpath*** of path *p* = 〈*v*[0], *v*[1], … , *v[k]*〉 is a contiguous subsequence
    of its vertices. That is, for any 0 ≤ *i* ≤ *j* ≤ *k*, the subsequence of vertices
    〈*v[i]*, *v*[*i*+1], … , *v[j]*〉 is a subpath of *p*.
  prefs: []
  type: TYPE_NORMAL
- en: In a directed graph, a path 〈*v*[0], *v*[1], … , *v[k]*〉 forms a ***cycle***
    if *v*[0] = *v[k]* and the path contains at least one edge. The cycle is ***simple***
    if, in addition, *v*[1], *v*[2], … , *v[k]* are distinct. A cycle consisting of
    *k* vertices has ***length*** *k*. A self-loop is a cycle of length 1\. Two paths
    〈*v*[0], *v*[1], *v*[2], … , *v*[*k*−1], *v*[0]〉 and ![art](images/Art_P1623a.jpg)
    form the same cycle if there exists an integer *j* such that ![art](images/Art_P1623b.jpg)
    for *i* = 0, 1, … , *k*−1\. In [Figure B.2(a)](#Fig_B-2), the path 〈1,2,4,1〉 forms
    the same cycle as the paths 〈2, 4, 1, 2〉 and 〈4, 1, 2, 4〉. This cycle is simple,
    but the cycle 〈1, 2, 4, 5, 4, 1〉 is not. The cycle 〈2, 2〉 formed by the edge (2,
    2) is a self-loop. A directed graph with no self-loops is ***simple***. In an
    undirected graph, a path 〈*v*[0], *v*[1], …, *v*[*k*]〉 forms a ***cycle*** if
    *k* > 0, *v*[0] = *v[k]*, and all edges on the path are distinct. The cycle is
    ***simple*** if *v*[1], *v*[2], … , *v[k]* are distinct. For example, in [Figure
    B.2(b)](#Fig_B-2), the path 〈1, 2, 5, 1〉 is a simple cycle. A graph with no simple
    cycles is ***acyclic***.
  prefs: []
  type: TYPE_NORMAL
- en: 'An undirected graph is ***connected*** if every vertex is reachable from all
    other vertices. The ***connected components*** of an undirected graph are the
    equivalence classes of vertices under the “is reachable from” relation. The graph
    shown in [Figure B.2(b)](#Fig_B-2) has three connected components: {1, 2, 5},
    {3, 6}, and {4}. Every vertex in the connected component {1, 2, 5} is reachable
    from every other vertex in {1, 2, 5}. An undirected graph is connected if it has
    exactly one connected component. The edges of a connected component are those
    that are incident on only the vertices of the component. In other words, edge
    (*u*, *v*) is an edge of a connected component only if both *u* and *v* are vertices
    of the component.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A directed graph is ***strongly connected*** if every two vertices are reachable
    from each other. The ***strongly connected components*** of a directed graph are
    the equivalence classes of vertices under the “are mutually reachable” relation.
    A directed graph is strongly connected if it has only one strongly connected component.
    The graph in [Figure B.2(a)](#Fig_B-2) has three strongly connected components:
    {1, 2, 4, 5}, {3}, and {6}. All pairs of vertices in {1, 2, 4, 5} are mutually
    reachable. The vertices {3, 6} do not form a strongly connected component, since
    vertex 6 cannot be reached from vertex 3.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Two graphs *G* = (*V*, *E*) and *G*′ = (*V*′, *E*′) are ***isomorphic*** if
    there exists a bijection *f* : *V* → *V*′ such that (*u*, *v*) ∈ *E* if and only
    if (*f* (*u*), *f* (*v*)) ∈ *E*′. In other words, *G* and *G*′ are isomorphic
    if the vertices of *G* can be relabeled to be vertices of *G*′, maintaining the
    corresponding edges in *G* and *G*′. [Figure B.3(a)](#Fig_B-3) shows a pair of
    isomorphic graphs *G* and *G*′ with respective vertex sets *V* = {1, 2, 3, 4,
    5, 6} and *V*′ = {*u, v, w, x, y, z*}. The mapping from *V* to *V*′ given by *f*
    (1) = *u, f* (2) = *v, f* (3) = *w, f* (4) = *x, f* (5) = *y, f* (6) = *z* provides
    the required bijective function. The graphs in [Figure B.3(b)](#Fig_B-3) are not
    isomorphic. Although both graphs have 5 vertices and 7 edges, the top graph has
    a vertex of degree 4 and the bottom graph does not.'
  prefs: []
  type: TYPE_NORMAL
- en: We say that a graph *G*′ = (*V*′, *E*′) is a ***subgraph*** of *G* = (*V*, *E*)
    if *V*′ ⊆ *V* and *E*′ ⊆ *E*. Given a set *V*′ ⊆ *V*, the subgraph of *G **induced***
    by *V*′ is the graph *G*′ = (*V*′, *E*′), where
  prefs: []
  type: TYPE_NORMAL
- en: '*E*′ = {(*u*, *v*) ∈ *E* : *u, v* ∈ *V*′}.'
  prefs: []
  type: TYPE_NORMAL
- en: The subgraph induced by the vertex set {1, 2, 3, 6} in [Figure B.2(a)](#Fig_B-2)
    appears in [Figure B.2(c)](#Fig_B-2) and has the edge set {(1, 2), (2, 2), (6,
    3)}.
  prefs: []
  type: TYPE_NORMAL
- en: Given an undirected graph *G* = (*V*, *E*), the ***directed version*** of *G*
    is the directed graph *G*′ = (*V*, *E*′), where (*u*, *v*) ∈ *E*′ if and only
    if (*u*, *v*) ∈ *E*. That is, each undirected edge (*u*, *v*) in *G* turns into
    two directed edges, (*u*, *v*) and (*v*, *u*), in the directed version. Given
    a directed graph *G* = (*V*, *E*), the ***undirected version*** of *G* is the
    undirected graph *G*′ = (*V*, *E*′), where (*u*, *v*) ∈ *E*′ if and only if *u*
    ≠ *v* and *E* contains at least one of the edges (*u*, *v*) and (*v*, *u*). That
    is, the undirected version contains the edges of *G* “with their directions removed”
    and with self-loops eliminated. (Since (*u*, *v*) and (*v*, *u*) are the same
    edge in an undirected graph, the undirected version of a directed graph contains
    it only once, even if the directed graph contains both edges (*u*, *v*) and (*v*,
    *u*).) In a directed graph *G* = (*V*, *E*), a ***neighbor*** of a vertex *u*
    is any vertex that is adjacent to *u* in the undirected version of *G*. That is,
    *v* is a neighbor of *u* if *u* ≠ *v* and either (*u*, *v*) ∈ *E* or (*v*, *u*)
    ∈ *E*. In an undirected graph, *u* and *v* are neighbors if they are adjacent.
  prefs: []
  type: TYPE_NORMAL
- en: '![art](images/Art_P1624.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure B.3 (a)** A pair of isomorphic graphs. The vertices of the top graph
    are mapped to the vertices of the bottom graph by *f* (1) = *u, f* (2) = *v, f*
    (3) = *w, f* (4) = *x, f* (5) = *y, f* (6) = *z*. **(b)** Two graphs that are
    not isomorphic. The top graph has a vertex of degree 4, and the bottom graph does
    not.'
  prefs: []
  type: TYPE_NORMAL
- en: Several kinds of graphs have special names. A ***complete graph*** is an undirected
    graph in which every pair of vertices is adjacent. An undirected graph *G* = (*V*,
    *E*) is ***bipartite*** if *V* can be partitioned into two sets *V*[1] and *V*[2]
    such that (*u*, *v*) ∈ *E* implies either *u* ∈ *V*[1] and *v* ∈ *V*[2] or *u*
    ∈ *V*[2] and *v* ∈ *V*[1]. That is, all edges go between the two sets *V*[1] and
    *V*[2]. An acyclic, undirected graph is a ***forest***, and a connected, acyclic,
    undirected graph is a ***(free) tree*** (see [Section B.5](appendix002.xhtml#Sec_B.5)).
    We often take the first letters of “directed acyclic graph” and call such a graph
    a ***dag***.
  prefs: []
  type: TYPE_NORMAL
- en: There are two variants of graphs that you may occasionally encounter. A ***multigraph***
    is like an undirected graph, but it can have both multiple edges between vertices
    (such as two distinct edges (*u*, *v*) and (*u*, *v*)) and self-loops. A ***hypergraph***
    is like an undirected graph, but each ***hyperedge***, rather than connecting
    two vertices, connects an arbitrary subset of vertices. Many algorithms written
    for ordinary directed and undirected graphs can be adapted to run on these graphlike
    structures.
  prefs: []
  type: TYPE_NORMAL
- en: The ***contraction*** of an undirected graph *G* = (*V*, *E*) by an edge *e*
    = (*u*, *v*) is a graph *G*′ = (*V*′, *E*′), where *V*′ = *V* − {*u, v*} ∪ {*x*}
    and *x* is a new vertex. The set of edges *E*′ is formed from *E* by deleting
    the edge (*u*, *v*) and, for each vertex *w* adjacent to *u* or *v*, deleting
    whichever of (*u*, *w*) and (*v*, *w*) belongs to *E* and adding the new edge
    (*x*, *w*). In effect, *u* and *v* are “contracted” into a single vertex.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises**'
  prefs: []
  type: TYPE_NORMAL
- en: '***B.4-1***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Attendees of a faculty party shake hands to greet each other, with every pair
    of professors shaking hands one time. Each professor remembers the number of times
    he or she shook hands. At the end of the party, the department head asks the professors
    for their totals and adds them all up. Show that the result is even by proving
    the ***handshaking lemma***: if *G* = (*V*, *E*) is an undirected graph, then'
  prefs: []
  type: TYPE_NORMAL
- en: '![art](images/Art_P1625.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '***B.4-2***'
  prefs: []
  type: TYPE_NORMAL
- en: Show that if a directed or undirected graph contains a path between two vertices
    *u* and *v*, then it contains a simple path between *u* and *v*. Show that if
    a directed graph contains a cycle, then it contains a simple cycle.
  prefs: []
  type: TYPE_NORMAL
- en: '***B.4-3***'
  prefs: []
  type: TYPE_NORMAL
- en: Show that any connected, undirected graph *G* = (*V*, *E*) satisfies |*E*| ≥
    |*V* | − 1.
  prefs: []
  type: TYPE_NORMAL
- en: '***B.4-4***'
  prefs: []
  type: TYPE_NORMAL
- en: Verify that in an undirected graph, the “is reachable from” relation is an equivalence
    relation on the vertices of the graph. Which of the three properties of an equivalence
    relation hold in general for the “is reachable from” relation on the vertices
    of a directed graph?
  prefs: []
  type: TYPE_NORMAL
- en: '***B.4-5***'
  prefs: []
  type: TYPE_NORMAL
- en: What is the undirected version of the directed graph in [Figure B.2(a)](#Fig_B-2)?
    What is the directed version of the undirected graph in [Figure B.2(b)](#Fig_B-2)?
  prefs: []
  type: TYPE_NORMAL
- en: '***B.4-6***'
  prefs: []
  type: TYPE_NORMAL
- en: Show how a bipartite graph can represent a hypergraph by letting incidence in
    the hypergraph correspond to adjacency in the bipartite graph. (*Hint:* Let one
    set of vertices in the bipartite graph correspond to vertices of the hypergraph,
    and let the other set of vertices of the bipartite graph correspond to hyperedges.)
  prefs: []
  type: TYPE_NORMAL
- en: '[**B.5 Trees**](toc.xhtml#Rh1-222)'
  prefs: []
  type: TYPE_NORMAL
- en: As with graphs, there are many related, but slightly different, notions of trees.
    This section presents definitions and mathematical properties of several kinds
    of trees. [Sections 10.3](chapter010.xhtml#Sec_10.3) and [20.1](chapter020.xhtml#Sec_20.1)
    describe how to represent trees in computer memory.
  prefs: []
  type: TYPE_NORMAL
- en: '**B.5.1 Free trees**'
  prefs: []
  type: TYPE_NORMAL
- en: As defined in [Section B.4](appendix002.xhtml#Sec_B.4), a ***free tree*** is
    a connected, acyclic, undirected graph. We often omit the adjective “free” when
    we say that a graph is a tree. If an undirected graph is acyclic but possibly
    disconnected, it is a ***forest***. Many algorithms that work for trees also work
    for forests. [Figure B.4(a)](#Fig_B-4) shows a free tree, and [Figure B.4(b)](#Fig_B-4)
    shows a forest. The forest in [Figure B.4(b)](#Fig_B-4) is not a tree because
    it is not connected. The graph in [Figure B.4(c)](#Fig_B-4) is connected but neither
    a tree nor a forest, because it contains a cycle.
  prefs: []
  type: TYPE_NORMAL
- en: The following theorem captures many important facts about free trees.
  prefs: []
  type: TYPE_NORMAL
- en: '***Theorem B.2 (Properties of free trees)***'
  prefs: []
  type: TYPE_NORMAL
- en: '![art](images/Art_P1626.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure B.4 (a)** A free tree. **(b)** A forest. **(c)** A graph that contains
    a cycle and is therefore neither a tree nor a forest.'
  prefs: []
  type: TYPE_NORMAL
- en: Let *G* = (*V*, *E*) be an undirected graph. The following statements are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: '*G* is a free tree.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any two vertices in *G* are connected by a unique simple path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*G* is connected, but if any edge is removed from *E*, the resulting graph
    is disconnected.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*G* is connected, and |*E*| = |*V* | − 1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*G* is acyclic, and |*E*| = |*V* | − 1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*G* is acyclic, but if any edge is added to *E*, the resulting graph contains
    a cycle.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![art](images/Art_P1627.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure B.5** A step in the proof of Theorem B.2: if (1) *G* is a free tree,
    then (2) any two vertices in *G* are connected by a unique simple path. Assume
    for the sake of contradiction that vertices *u* and *v* are connected by two distinct
    simple paths. These paths first diverge at vertex *w*, and they first reconverge
    at vertex *z*. The path *p*′ concatenated with the reverse of the path *p*″ forms
    a cycle, which yields the contradiction.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Proof***   (1) ⇒ (2): Since a tree is connected, any two vertices in *G*
    are connected by at least one simple path. Suppose for the sake of contradiction
    that vertices *u* and *v* are connected by two distinct simple paths as shown
    in [Figure B.5](#Fig_B-5). Let *w* be the vertex at which the paths first diverge.
    That is, if we call the paths *p*[1] and *p*[2], then *w* is the first vertex
    on both *p*[1] and *p*[2] whose successor on *p*[1] is *x* and whose successor
    on *p*[2] is *y*, where *x* ≠ *y*. Let *z* be the first vertex at which the paths
    reconverge, that is, *z* is the first vertex following *w* on *p*[1] that is also
    on *p*[2]. Let *p*′ = *w* → *x* ⇝ *z* be the subpath of *p*[1] from *w* through
    *x* to *z*, so that ![art](images/Art_P1628.jpg), and let *p*″ = *w* → *y* ⇝ *z*
    be the subpath of *p*[2] from *w* through *y* to *z*, so that ![art](images/Art_P1630.jpg).
    Paths *p*′ and *p*″ share no vertices except their endpoints. Then, as [Figure
    B.5](#Fig_B-5) shows, the path obtained by concatenating *p*′ and the reverse
    of *p*″ is a cycle, which contradicts our assumption that *G* is a tree. Thus,
    if *G* is a tree, there can be at most one simple path between two vertices.'
  prefs: []
  type: TYPE_NORMAL
- en: '(2) ⇒ (3): If any two vertices in *G* are connected by a unique simple path,
    then *G* is connected. Let (*u*, *v*) be any edge in *E*. This edge is a path
    from *u* to *v*, and so it must be the unique path from *u* to *v*. If (*u*, *v*)
    were to be removed from *G*, there would be no path from *u* to *v*, and *G* would
    be disconnected.'
  prefs: []
  type: TYPE_NORMAL
- en: '(3) ⇒ (4): By assumption, the graph *G* is connected, so Exercise B.4-3 gives
    that |*E*| ≥ |*V*| − 1\. We prove |*E*| ≤ |*V*| − 1 by induction on |*V*|. The
    base cases are when |*V*| = 1 or |*V*| = 2, and in either case, |*E*| = |*V*|
    − 1\. For the inductive step, suppose that |*V*| ≥ 3 for graph *G* and that any
    graph *G*′ = (*V*′, *E*′), where |*V*′| < |*V*|, that satisfies (3) also satisfies
    |*E*′| ≤ |*V*′| − 1\. Removing an arbitrary edge from *G* separates the graph
    into *k* ≥ 2 connected components (actually *k* = 2). Each component satisfies
    (3), or else *G* would not satisfy (3). Consider each connected component *V[i]*,
    with edge set *E[i]*, as a separate free tree. Then, because each connected component
    has fewer than |*V*| vertices, the inductive hypothesis implies that |*E[i]*|
    ≤ |*V[i]*| − 1\. Thus, the number of edges in all *k* connected components combined
    is at most |*V*| − *k* ≤ |*V*| − 2\. Adding in the removed edge yields |*E*| ≤
    |*V*| − 1.'
  prefs: []
  type: TYPE_NORMAL
- en: '(4) ⇒ (5): Suppose that *G* is connected and that |*E*| = |*V*| − 1\. We must
    show that *G* is acyclic. Suppose that *G* has a cycle containing *k* vertices
    *v*[1], *v*[2], … , *v[k]*, and without loss of generality assume that this cycle
    is simple. Let *G[k]* = (*V[k], E[k]*) be the subgraph of *G* consisting of the
    cycle, so that |*V[k]*| = |*E[k]*| = *k*. If *k* < |*V*|, then because *G* is
    connected, there must be a vertex *v*[*k*+1]∈ *V* − *V[k]* that is adjacent to
    some vertex *v[i]* ∈ *V[k]*. Define *G*[*k*+1] = (*V*[*k*+1], *E*[*k*+1]) to be
    the subgraph of *G* with *V*[*k*+1] = *V[k]* ∪ {*v*[*k*+1]} and *E*[*k*+1] = *E[k]*
    ∪ {(*v*[*i*], *v*[*k*+1])}. Note that |*V*[*k*+1]| = |*E*[*k*+1]| = *k* + 1\.
    If *k* + 1 < |*V*|, then continue, defining *G*[*k*+2] in the same manner, and
    so forth, until we obtain *G[n]* = (*V[n], E[n]*), where *n* = |*V*|, *V[n]* =
    *V*, and |*E[n]*| = |*V[n]*| = |*V*|. Since *G[n]* is a subgraph of *G*, we have
    *E[n]* ⊆ *E*, and hence |*E*| ≥ |*E[n]*| = |*V[n]*| = |*V*|, which contradicts
    the assumption that |*E*| = |*V*| − 1\. Thus, *G* is acyclic.'
  prefs: []
  type: TYPE_NORMAL
- en: '(5) ⇒ (6): Suppose that *G* is acyclic and that |*E*| = |*V*| − 1\. Let *k*
    be the number of connected components of *G*. Each connected component is a free
    tree by definition, and since (1) implies (5), the sum of all edges in all connected
    components of *G* is |*V*| − *k*. Consequently, *k* must equal 1, and *G* is in
    fact a tree. Since (1) implies (2), any two vertices in *G* are connected by a
    unique simple path. Thus, adding any edge to *G* creates a cycle.'
  prefs: []
  type: TYPE_NORMAL
- en: '(6) ⇒ (1): Suppose that *G* is acyclic but that adding any edge to *E* creates
    a cycle. We must show that *G* is connected. Let *u* and *v* be arbitrary vertices
    in *G*. If *u* and *v* are not already adjacent, adding the edge (*u*, *v*) creates
    a cycle in which all edges but (*u*, *v*) belong to *G*. Thus, the cycle minus
    edge (*u*, *v*) must contain a path from *u* to *v*, and since *u* and *v* were
    chosen arbitrarily, *G* is connected.'
  prefs: []
  type: TYPE_NORMAL
- en: ▪
  prefs: []
  type: TYPE_NORMAL
- en: '**B.5.2 Rooted and ordered trees**'
  prefs: []
  type: TYPE_NORMAL
- en: A ***rooted tree*** is a free tree in which one of the vertices is distinguished
    from the others. We call the distinguished vertex the ***root*** of the tree.
    We often refer to a vertex of a rooted tree as a ***node***^([5](#footnote_5))
    of the tree. [Figure B.6(a)](#Fig_B-6) shows a rooted tree on a set of 12 nodes
    with root 7.
  prefs: []
  type: TYPE_NORMAL
- en: '![art](images/Art_P1631.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure B.6** Rooted and ordered trees. **(a)** A rooted tree with height
    4\. The tree is drawn in a standard way: the root (node 7) is at the top, its
    children (nodes with depth 1) are beneath it, their children (nodes with depth
    2) are beneath them, and so forth. If the tree is ordered, the relative left-to-right
    order of the children of a node matters; otherwise, it doesn’t. **(b)** Another
    rooted tree. As a rooted tree, it is identical to the tree in (a), but as an ordered
    tree it is different, since the children of node 3 appear in a different order.'
  prefs: []
  type: TYPE_NORMAL
- en: Consider a node *x* in a rooted tree *T* with root *r*. We call any node *y*
    on the unique simple path from *r* to *x* an ***ancestor*** of *x*. If *y* is
    an ancestor of *x*, then *x* is a ***descendant*** of *y*. (Every node is both
    an ancestor and a descendant of itself.) If *y* is an ancestor of *x* and *x*
    ≠ *y*, then *y* is a ***proper ancestor*** of *x* and *x* is a ***proper descendant***
    of *y*. The ***subtree rooted at x*** is the tree induced by descendants of *x*,
    rooted at *x*. For example, the subtree rooted at node 8 in [Figure B.6(a)](#Fig_B-6)
    contains nodes 8, 6, 5, and 9.
  prefs: []
  type: TYPE_NORMAL
- en: If the last edge on the simple path from the root *r* of a tree *T* to a node
    *x* is (*y*, *x*), then *y* is the ***parent*** of *x*, and *x* is a ***child***
    of *y*. The root is the only node in *T* with no parent. If two nodes have the
    same parent, they are ***siblings***. A node with no children is a ***leaf***
    or ***external node***. A nonleaf node is an ***internal node***.
  prefs: []
  type: TYPE_NORMAL
- en: The number of children of a node *x* in a rooted tree *T* is the ***degree***
    of *x*.^([6](#footnote_6)) The length of the simple path from the root *r* to
    a node *x* is the ***depth*** of *x* in *T*. A ***level*** of a tree consists
    of all nodes at the same depth. The ***height*** of a node in a tree is the number
    of edges on the longest simple downward path from the node to a leaf, and the
    height of a tree is the height of its root. The height of a tree is also equal
    to the largest depth of any node in the tree.
  prefs: []
  type: TYPE_NORMAL
- en: An ***ordered tree*** is a rooted tree in which the children of each node are
    ordered. That is, if a node has *k* children, then there is a first child, a second
    child, and so on, up to and including a *k*th child. The two trees in [Figure
    B.6](#Fig_B-6) are different when considered to be ordered trees, but the same
    when considered to be just rooted trees.
  prefs: []
  type: TYPE_NORMAL
- en: '**B.5.3 Binary and positional trees**'
  prefs: []
  type: TYPE_NORMAL
- en: We define binary trees recursively. A ***binary tree*** *T* is a structure defined
    on a finite set of nodes that either
  prefs: []
  type: TYPE_NORMAL
- en: contains no nodes, or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'is composed of three disjoint sets of nodes: a ***root*** node, a binary tree
    called its ***left subtree***, and a binary tree called its ***right subtree***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The binary tree that contains no nodes is called the ***empty tree*** or ***null
    tree***, sometimes denoted NIL. If the left subtree is nonempty, its root is called
    the ***left child*** of the root of the entire tree. Likewise, the root of a nonnull
    right subtree is the ***right child*** of the root of the entire tree. If a subtree
    is the null tree NIL, we say that the child is ***absent*** or ***missing***.
    [Figure B.7(a)](#Fig_B-7) shows a binary tree.
  prefs: []
  type: TYPE_NORMAL
- en: A binary tree is not simply an ordered tree in which each node has degree at
    most 2\. For example, in a binary tree, if a node has just one child, the position
    of the child—whether it is the ***left child*** or the ***right child***—matters.
    In an ordered tree, there is no distinguishing a sole child as being either left
    or right. [Figure B.7(b)](#Fig_B-7) shows a binary tree that differs from the
    tree in [Figure B.7(a)](#Fig_B-7) because of the position of one node. Considered
    as ordered trees, however, the two trees are identical.
  prefs: []
  type: TYPE_NORMAL
- en: 'One way to represent the positioning information in a binary tree is by the
    internal nodes of an ordered tree, as shown in [Figure B.7(c)](#Fig_B-7). The
    idea is to replace each missing child in the binary tree with a node having no
    children. These leaf nodes are drawn as squares in the figure. The tree that results
    is a ***full binary tree***: each node is either a leaf or has degree exactly
    2\. No nodes have degree 1\. Consequently, the order of the children of a node
    preserves the position information.'
  prefs: []
  type: TYPE_NORMAL
- en: '![art](images/Art_P1632.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure B.7** Binary trees. **(a)** A binary tree drawn in a standard way.
    The left child of a node is drawn beneath the node and to the left. The right
    child is drawn beneath and to the right. **(b)** A binary tree different from
    the one in (a). In (a), the left child of node 7 is 5 and the right child is absent.
    In (b), the left child of node 7 is absent and the right child is 5\. As ordered
    trees, these trees are the same, but as binary trees, they are distinct. **(c)**
    The binary tree in (a) represented by the internal nodes of a full binary tree:
    an ordered tree in which each internal node has degree 2\. The leaves in the tree
    are shown as squares.'
  prefs: []
  type: TYPE_NORMAL
- en: The positioning information that distinguishes binary trees from ordered trees
    extends to trees with more than two children per node. In a ***positional tree***,
    the children of a node are labeled with distinct positive integers. The *i*th
    child of a node is ***absent*** if no child is labeled with integer *i*. A ***k-ary***
    tree is a positional tree in which for every node, all children with labels greater
    than *k* are missing. Thus, a binary tree is a *k*-ary tree with *k* = 2.
  prefs: []
  type: TYPE_NORMAL
- en: A ***complete k-ary tree*** is a *k*-ary tree in which all leaves have the same
    depth and all internal nodes have degree *k*. [Figure B.8](#Fig_B-8) shows a complete
    binary tree of height 3\. How many leaves does a complete *k*-ary tree of height
    *h* have? The root has *k* children at depth 1, each of which has *k* children
    at depth 2, etc. Thus, the number of nodes at depth *d* is *k^d*. In a complete
    *k*-ary tree with height *h*, the leaves are at depth *h*, so that there are *k^h*
    leaves. Consequently, the height of a complete *k*-ary tree with *n* leaves is
    log[*k*]*n*. A complete *k*-ary tree of height *h* has
  prefs: []
  type: TYPE_NORMAL
- en: '![art](images/Art_P1633.jpg)'
  prefs: []
  type: TYPE_IMG
- en: internal nodes. Thus, a complete binary tree has 2^(*h*) − 1 internal nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '![art](images/Art_P1634.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure B.8** A complete binary tree of height 3 with 8 leaves and 7 internal
    nodes.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises**'
  prefs: []
  type: TYPE_NORMAL
- en: '***B.5-1***'
  prefs: []
  type: TYPE_NORMAL
- en: Draw all the free trees composed of the three vertices *x*, *y*, and *z*. Draw
    all the rooted trees with nodes *x*, *y*, and *z* with *x* as the root. Draw all
    the ordered trees with nodes *x*, *y*, and *z* with *x* as the root. Draw all
    the binary trees with nodes *x*, *y*, and *z* with *x* as the root.
  prefs: []
  type: TYPE_NORMAL
- en: '***B.5-2***'
  prefs: []
  type: TYPE_NORMAL
- en: Let *G* = (*V*, *E*) be a directed acyclic graph in which there is a vertex
    *v*[0] ∈ *V* such that there exists a unique path from *v*[0] to every vertex
    *v* ∈ *V*. Prove that the undirected version of *G* forms a tree.
  prefs: []
  type: TYPE_NORMAL
- en: '***B.5-3***'
  prefs: []
  type: TYPE_NORMAL
- en: Show by induction that the number of degree-2 nodes in any nonempty binary tree
    is one less than the number of leaves. Conclude that the number of internal nodes
    in a full binary tree is one less than the number of leaves.
  prefs: []
  type: TYPE_NORMAL
- en: '***B.5-4***'
  prefs: []
  type: TYPE_NORMAL
- en: Prove that for any integer *k* ≥ 1, there is a full binary tree with *k* leaves.
  prefs: []
  type: TYPE_NORMAL
- en: '***B.5-5***'
  prefs: []
  type: TYPE_NORMAL
- en: Use induction to show that a nonempty binary tree with *n* nodes has height
    at least ⌊lg *n*⌋.
  prefs: []
  type: TYPE_NORMAL
- en: ★ ***B.5-6***
  prefs: []
  type: TYPE_NORMAL
- en: The ***internal path length*** of a full binary tree is the sum, taken over
    all internal nodes of the tree, of the depth of each node. Likewise, the ***external
    path length*** is the sum, taken over all leaves of the tree, of the depth of
    each leaf. Consider a full binary tree with *n* internal nodes, internal path
    length *i*, and external path length *e*. Prove that *e* = *i* + 2*n*.
  prefs: []
  type: TYPE_NORMAL
- en: ★ ***B.5-7***
  prefs: []
  type: TYPE_NORMAL
- en: 'Associate a “weight” *w*(*x*) = 2^(−*d*) with each leaf *x* of depth *d* in
    a binary tree *T*, and let *L* be the set of leaves of *T*. Prove the ***Kraft
    inequality***: Σ[*x*∈*L*] *w*(*x*) ≤ 1.'
  prefs: []
  type: TYPE_NORMAL
- en: ★ ***B.5-8***
  prefs: []
  type: TYPE_NORMAL
- en: Show that if *L* ≥ 2, then every binary tree with *L* leaves contains a subtree
    having between *L*/3 and 2*L*/3 leaves, inclusive.
  prefs: []
  type: TYPE_NORMAL
- en: '**Problems**'
  prefs: []
  type: TYPE_NORMAL
- en: '***B-1 Graph coloring***'
  prefs: []
  type: TYPE_NORMAL
- en: 'A ***k-coloring*** of undirected graph *G* = (*V*, *E*) is a function *c* :
    *V* → {1, 2, … , *k*} such that *c*(*u*) ≠ *c*(*v*) for every edge (*u*, *v*)
    ∈ *E*. In other words, the numbers 1, 2, … , *k* represent the *k* colors, and
    adjacent vertices must have different colors.'
  prefs: []
  type: TYPE_NORMAL
- en: '***a.*** Show that any tree is 2-colorable.'
  prefs: []
  type: TYPE_NORMAL
- en: '***b.*** Show that the following are equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '*G* is bipartite.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*G* is 2-colorable.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*G* has no cycles of odd length.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***c.*** Let *d* be the maximum degree of any vertex in a graph *G*. Prove
    that *G* can be colored with *d* + 1 colors.'
  prefs: []
  type: TYPE_NORMAL
- en: '***d.*** Show that if *G* has *O*(|*V*|) edges, then *G* can be colored with
    ![art](images/Art_P1635.jpg) colors.'
  prefs: []
  type: TYPE_NORMAL
- en: '***B-2 Friendly graphs***'
  prefs: []
  type: TYPE_NORMAL
- en: Reword each of the following statements as a theorem about undirected graphs,
    and then prove it. Assume that friendship is symmetric but not reflexive.
  prefs: []
  type: TYPE_NORMAL
- en: '***a.*** Any group of at least two people contains at least two people with
    the same number of friends in the group.'
  prefs: []
  type: TYPE_NORMAL
- en: '***b.*** Every group of six people contains either at least three mutual friends
    or at least three mutual strangers.'
  prefs: []
  type: TYPE_NORMAL
- en: '***c.*** Any group of people can be partitioned into two subgroups such that
    at least half the friends of each person belong to the subgroup of which that
    person is *not* a member.'
  prefs: []
  type: TYPE_NORMAL
- en: '***d.*** If everyone in a group is the friend of at least half the people in
    the group, then the group can be seated around a table in such a way that everyone
    is seated between two friends.'
  prefs: []
  type: TYPE_NORMAL
- en: '***B-3 Bisecting trees***'
  prefs: []
  type: TYPE_NORMAL
- en: Many divide-and-conquer algorithms that operate on graphs require that the graph
    be bisected into two nearly equal-sized subgraphs, which are induced by a partition
    of the vertices. This problem investigates bisections of trees formed by removing
    a small number of edges. We require that whenever two vertices end up in the same
    subtree after removing edges, then they must belong to the same partition.
  prefs: []
  type: TYPE_NORMAL
- en: '***a.*** Show that the vertices of any *n*-vertex binary tree can be partitioned
    into two sets *A* and *B*, such that |*A*| ≤ 3*n*/4 and |*B*| ≤ 3*n*/4, by removing
    a single edge.'
  prefs: []
  type: TYPE_NORMAL
- en: '***b.*** Show that the constant 3/4 in part (a) is optimal in the worst case
    by giving an example of a simple binary tree whose most evenly balanced partition
    upon removal of a single edge has |*A*| = 3*n*/4.'
  prefs: []
  type: TYPE_NORMAL
- en: '***c.*** Show that by removing at most *O*(lg *n*) edges, we can partition
    the vertices of any *n*-vertex binary tree into two sets *A* and *B* such that
    |*A*| = ⌊*n*/2⌋ and |*B*| = ⌈*n*/2⌉.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Appendix notes**'
  prefs: []
  type: TYPE_NORMAL
- en: G. Boole pioneered the development of symbolic logic, and he introduced many
    of the basic set notations in a book published in 1854\. Modern set theory was
    created by G. Cantor during the period 1874–1895\. Cantor focused primarily on
    sets of infinite cardinality. The term “function” is attributed to G. W. Leibniz,
    who used it to refer to several kinds of mathematical formulas. His limited definition
    has been generalized many times. Graph theory originated in 1736, when L. Euler
    proved that it was impossible to cross each of the seven bridges in the city of
    Königsberg exactly once and return to the starting point.
  prefs: []
  type: TYPE_NORMAL
- en: The book by Harary [[208](bibliography001.xhtml#endnote_208)] provides a useful
    compendium of many definitions and results from graph theory.
  prefs: []
  type: TYPE_NORMAL
- en: '[¹](#footnote_ref_1) A variation of a set, which can contain the same object
    more than once, is called a ***multiset***.'
  prefs: []
  type: TYPE_NORMAL
- en: '[²](#footnote_ref_2) Some authors start the natural numbers with 1 instead
    of 0\. The modern trend seems to be to start with 0.'
  prefs: []
  type: TYPE_NORMAL
- en: '[³](#footnote_ref_3) To be precise, in order for the “fit inside” relation
    to be a partial order, we need to view a box as fitting inside itself.'
  prefs: []
  type: TYPE_NORMAL
- en: '[⁴](#footnote_ref_4) Some authors refer to what we call a path as a “walk”
    and to what we call a simple path as just a “path.”'
  prefs: []
  type: TYPE_NORMAL
- en: '[⁵](#footnote_ref_5) The term “node” is often used in the graph theory literature
    as a synonym for “vertex.” We reserve the term “node” to mean a vertex of a rooted
    tree.'
  prefs: []
  type: TYPE_NORMAL
- en: '[⁶](#footnote_ref_6) The degree of a node depends on whether we consider *T*
    to be a rooted tree or a free tree. The degree of a vertex in a free tree is,
    as in any undirected graph, the number of adjacent vertices. In a rooted tree,
    however, the degree is the number of children—the parent of a node does not count
    toward its degree.'
  prefs: []
  type: TYPE_NORMAL
