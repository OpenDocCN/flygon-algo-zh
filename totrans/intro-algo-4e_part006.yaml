- en: '***第六部分    图算法***'
  prefs: []
  type: TYPE_NORMAL
- en: '**介绍**'
  prefs: []
  type: TYPE_NORMAL
- en: 图问题在计算机科学中随处可见，处理它们的算法对该领域至关重要。数百个有趣的计算问题都涉及图。本部分涉及了一些更重要的问题。
  prefs: []
  type: TYPE_NORMAL
- en: 第二十章展示了如何在计算机中表示图，然后讨论了基于广度优先搜索或深度优先搜索搜索图的算法。该章节给出了深度优先搜索的两个应用：有向无环图的拓扑排序和将有向图分解为其强连通分量。
  prefs: []
  type: TYPE_NORMAL
- en: 第二十一章描述了如何计算图的最小生成树：连接所有顶点的最小权重方式，当每条边都有关联的权重时。计算最小生成树的算法是贪婪算法的良好示例（参见第十五章）。
  prefs: []
  type: TYPE_NORMAL
- en: 第二十二章和第二十三章考虑了在每条边都有关联长度或“权重”时如何计算顶点之间的最短路径。第二十二章展示了如何从给定源顶点找到所有其他顶点的最短路径，而第二十三章则研究了计算每对顶点之间的最短路径的方法。
  prefs: []
  type: TYPE_NORMAL
- en: 第二十四章展示了如何计算流网络中物质的最大流量，流网络是一个具有指定源顶点、指定汇顶点和指定边缘可传输物质容量的有向图。这个一般性问题以多种形式出现，一个好的计算最大流的算法可以帮助高效解决各种相关问题。
  prefs: []
  type: TYPE_NORMAL
- en: 最后，第二十五章探讨了二分图中的匹配问题：通过选择连接两个集合的边来配对顶点的方法。二分图匹配问题模拟了现实世界中出现的几种情况。该章探讨了如何找到最大基数匹配；“稳定婚姻问题”，其高度实用的应用是将医学住院医生与医院匹配；以及分配问题，最大化二分图匹配的总权重。
  prefs: []
  type: TYPE_NORMAL
- en: 当我们描述给定图*G* = (*V*, *E*)上的图算法的运行时间时，通常以图的顶点数|*V*|和边数|*E*|来衡量输入的大小。也就是说，我们用两个参数来表示输入的大小，而不仅仅是一个。我们采用了这些参数的一个常见符号约定。在渐近符号（如*O*记号或*Θ*记号）内，符号*V*表示|*V*|，符号*E*表示|*E*|。例如，我们可能会说，“该算法的运行时间为*O*(*VE*)”，意思是该算法的运行时间为*O*(|*V*|
    |*E*|)。这种约定使得运行时间公式更易阅读，而不会存在歧义。
  prefs: []
  type: TYPE_NORMAL
- en: 我们采用的另一个惯例出现在伪代码中。我们用*G*.*V*表示图*G*的顶点集，用*G*.*E*表示其边集。也就是说，伪代码将顶点和边集视为图的属性。
  prefs: []
  type: TYPE_NORMAL
